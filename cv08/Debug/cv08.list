
cv08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004134  08004134  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800413c  0800413c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000074  080041b8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080041b8  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfa2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001add  00000000  00000000  0002c046  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0002e708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242c2  00000000  00000000  0002f210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000087b7  00000000  00000000  000534d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9853  00000000  00000000  0005bc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001354dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003884  00000000  00000000  00135558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ff4 	.word	0x08003ff4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003ff4 	.word	0x08003ff4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d013      	beq.n	80005d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00b      	beq.n	80005d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	e000      	b.n	80005bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f9      	beq.n	80005ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d0:	687b      	ldr	r3, [r7, #4]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 ITM_SendChar(ch);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffd1 	bl	8000590 <ITM_SendChar>
return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fe35 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f99b 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 fa79 	bl	8000afc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060a:	f000 fa4d 	bl	8000aa8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800060e:	f000 f9ff 	bl	8000a10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000612:	48b6      	ldr	r0, [pc, #728]	; (80008ec <main+0x2f4>)
 8000614:	f001 fe39 	bl	800228a <HAL_TIM_Base_Start_IT>

  const uint8_t password[5] =  { 7, 9, 3, 2, 12 };
 8000618:	4ab5      	ldr	r2, [pc, #724]	; (80008f0 <main+0x2f8>)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	6018      	str	r0, [r3, #0]
 8000624:	3304      	adds	r3, #4
 8000626:	7019      	strb	r1, [r3, #0]
  uint8_t key_test[5] = {0, 0, 0, 0, 0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	711a      	strb	r2, [r3, #4]
  uint32_t tick = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(state == FIRST){
 8000634:	4baf      	ldr	r3, [pc, #700]	; (80008f4 <main+0x2fc>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d136      	bne.n	80006aa <main+0xb2>
		  if(key != -1){
 800063c:	4bae      	ldr	r3, [pc, #696]	; (80008f8 <main+0x300>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000646:	d011      	beq.n	800066c <main+0x74>
			  printf("pressed: %d\n",key);
 8000648:	4bab      	ldr	r3, [pc, #684]	; (80008f8 <main+0x300>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	48aa      	ldr	r0, [pc, #680]	; (80008fc <main+0x304>)
 8000652:	f002 fdeb 	bl	800322c <iprintf>
			  key_test[0] = key;
 8000656:	4ba8      	ldr	r3, [pc, #672]	; (80008f8 <main+0x300>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b25b      	sxtb	r3, r3
 800065c:	b2db      	uxtb	r3, r3
 800065e:	713b      	strb	r3, [r7, #4]
			  state = SECOND;
 8000660:	4ba4      	ldr	r3, [pc, #656]	; (80008f4 <main+0x2fc>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
			  tick = HAL_GetTick();
 8000666:	f000 fe67 	bl	8001338 <HAL_GetTick>
 800066a:	61f8      	str	r0, [r7, #28]
		  }
		  if(HAL_GetTick() >= (tick+TIMEOUT)){
 800066c:	f000 fe64 	bl	8001338 <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000678:	429a      	cmp	r2, r3
 800067a:	d312      	bcc.n	80006a2 <main+0xaa>
			  for(uint8_t i=0; i<5;i++) key_test[i]=0;
 800067c:	2300      	movs	r3, #0
 800067e:	76fb      	strb	r3, [r7, #27]
 8000680:	e009      	b.n	8000696 <main+0x9e>
 8000682:	7efb      	ldrb	r3, [r7, #27]
 8000684:	f107 0220 	add.w	r2, r7, #32
 8000688:	4413      	add	r3, r2
 800068a:	2200      	movs	r2, #0
 800068c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8000690:	7efb      	ldrb	r3, [r7, #27]
 8000692:	3301      	adds	r3, #1
 8000694:	76fb      	strb	r3, [r7, #27]
 8000696:	7efb      	ldrb	r3, [r7, #27]
 8000698:	2b04      	cmp	r3, #4
 800069a:	d9f2      	bls.n	8000682 <main+0x8a>
			  state = FIRST;
 800069c:	4b95      	ldr	r3, [pc, #596]	; (80008f4 <main+0x2fc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		  }
		  key = -1;
 80006a2:	4b95      	ldr	r3, [pc, #596]	; (80008f8 <main+0x300>)
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	e7c4      	b.n	8000634 <main+0x3c>
	  }
	  else if(state == SECOND){
 80006aa:	4b92      	ldr	r3, [pc, #584]	; (80008f4 <main+0x2fc>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d136      	bne.n	8000720 <main+0x128>
		  if(key != -1){
 80006b2:	4b91      	ldr	r3, [pc, #580]	; (80008f8 <main+0x300>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d011      	beq.n	80006e2 <main+0xea>
			  printf("pressed: %d\n",key);
 80006be:	4b8e      	ldr	r3, [pc, #568]	; (80008f8 <main+0x300>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	488d      	ldr	r0, [pc, #564]	; (80008fc <main+0x304>)
 80006c8:	f002 fdb0 	bl	800322c <iprintf>
			  key_test[1] = key;
 80006cc:	4b8a      	ldr	r3, [pc, #552]	; (80008f8 <main+0x300>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	717b      	strb	r3, [r7, #5]
			  state = THIRD;
 80006d6:	4b87      	ldr	r3, [pc, #540]	; (80008f4 <main+0x2fc>)
 80006d8:	2202      	movs	r2, #2
 80006da:	701a      	strb	r2, [r3, #0]
			  tick = HAL_GetTick();
 80006dc:	f000 fe2c 	bl	8001338 <HAL_GetTick>
 80006e0:	61f8      	str	r0, [r7, #28]
		  }
		  if(HAL_GetTick() >= (tick+TIMEOUT)){
 80006e2:	f000 fe29 	bl	8001338 <HAL_GetTick>
 80006e6:	4602      	mov	r2, r0
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d312      	bcc.n	8000718 <main+0x120>
			  for(uint8_t i=0; i<5;i++) key_test[i]=0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	76bb      	strb	r3, [r7, #26]
 80006f6:	e009      	b.n	800070c <main+0x114>
 80006f8:	7ebb      	ldrb	r3, [r7, #26]
 80006fa:	f107 0220 	add.w	r2, r7, #32
 80006fe:	4413      	add	r3, r2
 8000700:	2200      	movs	r2, #0
 8000702:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8000706:	7ebb      	ldrb	r3, [r7, #26]
 8000708:	3301      	adds	r3, #1
 800070a:	76bb      	strb	r3, [r7, #26]
 800070c:	7ebb      	ldrb	r3, [r7, #26]
 800070e:	2b04      	cmp	r3, #4
 8000710:	d9f2      	bls.n	80006f8 <main+0x100>
			  state = FIRST;
 8000712:	4b78      	ldr	r3, [pc, #480]	; (80008f4 <main+0x2fc>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
		  }
		  key = -1;
 8000718:	4b77      	ldr	r3, [pc, #476]	; (80008f8 <main+0x300>)
 800071a:	22ff      	movs	r2, #255	; 0xff
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	e789      	b.n	8000634 <main+0x3c>

	  }
	  else if(state == THIRD){
 8000720:	4b74      	ldr	r3, [pc, #464]	; (80008f4 <main+0x2fc>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d136      	bne.n	8000796 <main+0x19e>
		  if(key != -1){
 8000728:	4b73      	ldr	r3, [pc, #460]	; (80008f8 <main+0x300>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b25b      	sxtb	r3, r3
 800072e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000732:	d011      	beq.n	8000758 <main+0x160>
			  printf("pressed: %d\n",key);
 8000734:	4b70      	ldr	r3, [pc, #448]	; (80008f8 <main+0x300>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b25b      	sxtb	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	486f      	ldr	r0, [pc, #444]	; (80008fc <main+0x304>)
 800073e:	f002 fd75 	bl	800322c <iprintf>
			  key_test[2] = key;
 8000742:	4b6d      	ldr	r3, [pc, #436]	; (80008f8 <main+0x300>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	71bb      	strb	r3, [r7, #6]
			  state = FOURTH;
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <main+0x2fc>)
 800074e:	2203      	movs	r2, #3
 8000750:	701a      	strb	r2, [r3, #0]
			  tick = HAL_GetTick();
 8000752:	f000 fdf1 	bl	8001338 <HAL_GetTick>
 8000756:	61f8      	str	r0, [r7, #28]
		  }
		  if(HAL_GetTick() >= (tick+TIMEOUT)){
 8000758:	f000 fdee 	bl	8001338 <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000764:	429a      	cmp	r2, r3
 8000766:	d312      	bcc.n	800078e <main+0x196>
			  for(uint8_t i=0; i<5;i++) key_test[i]=0;
 8000768:	2300      	movs	r3, #0
 800076a:	767b      	strb	r3, [r7, #25]
 800076c:	e009      	b.n	8000782 <main+0x18a>
 800076e:	7e7b      	ldrb	r3, [r7, #25]
 8000770:	f107 0220 	add.w	r2, r7, #32
 8000774:	4413      	add	r3, r2
 8000776:	2200      	movs	r2, #0
 8000778:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800077c:	7e7b      	ldrb	r3, [r7, #25]
 800077e:	3301      	adds	r3, #1
 8000780:	767b      	strb	r3, [r7, #25]
 8000782:	7e7b      	ldrb	r3, [r7, #25]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d9f2      	bls.n	800076e <main+0x176>
			  state = FIRST;
 8000788:	4b5a      	ldr	r3, [pc, #360]	; (80008f4 <main+0x2fc>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
		  }
		  key = -1;
 800078e:	4b5a      	ldr	r3, [pc, #360]	; (80008f8 <main+0x300>)
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e74e      	b.n	8000634 <main+0x3c>

	  }
	  else if(state == FOURTH){
 8000796:	4b57      	ldr	r3, [pc, #348]	; (80008f4 <main+0x2fc>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d136      	bne.n	800080c <main+0x214>
		  if(key != -1){
 800079e:	4b56      	ldr	r3, [pc, #344]	; (80008f8 <main+0x300>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a8:	d011      	beq.n	80007ce <main+0x1d6>
			  printf("pressed: %d\n",key);
 80007aa:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <main+0x300>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	4852      	ldr	r0, [pc, #328]	; (80008fc <main+0x304>)
 80007b4:	f002 fd3a 	bl	800322c <iprintf>
			  key_test[3] = key;
 80007b8:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <main+0x300>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	71fb      	strb	r3, [r7, #7]
			  state = FIFTH;
 80007c2:	4b4c      	ldr	r3, [pc, #304]	; (80008f4 <main+0x2fc>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	701a      	strb	r2, [r3, #0]
			  tick = HAL_GetTick();
 80007c8:	f000 fdb6 	bl	8001338 <HAL_GetTick>
 80007cc:	61f8      	str	r0, [r7, #28]
		  }
		  if(HAL_GetTick() >= (tick+TIMEOUT)){
 80007ce:	f000 fdb3 	bl	8001338 <HAL_GetTick>
 80007d2:	4602      	mov	r2, r0
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80007da:	429a      	cmp	r2, r3
 80007dc:	d312      	bcc.n	8000804 <main+0x20c>
			  for(uint8_t i=0; i<5;i++) key_test[i]=0;
 80007de:	2300      	movs	r3, #0
 80007e0:	763b      	strb	r3, [r7, #24]
 80007e2:	e009      	b.n	80007f8 <main+0x200>
 80007e4:	7e3b      	ldrb	r3, [r7, #24]
 80007e6:	f107 0220 	add.w	r2, r7, #32
 80007ea:	4413      	add	r3, r2
 80007ec:	2200      	movs	r2, #0
 80007ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80007f2:	7e3b      	ldrb	r3, [r7, #24]
 80007f4:	3301      	adds	r3, #1
 80007f6:	763b      	strb	r3, [r7, #24]
 80007f8:	7e3b      	ldrb	r3, [r7, #24]
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	d9f2      	bls.n	80007e4 <main+0x1ec>
			  state = FIRST;
 80007fe:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <main+0x2fc>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
		  }
		  key = -1;
 8000804:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <main+0x300>)
 8000806:	22ff      	movs	r2, #255	; 0xff
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e713      	b.n	8000634 <main+0x3c>

	  }
	  else if(state == FIFTH){
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <main+0x2fc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b04      	cmp	r3, #4
 8000812:	f47f af0f 	bne.w	8000634 <main+0x3c>
		  if(key != -1){
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <main+0x300>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b25b      	sxtb	r3, r3
 800081c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000820:	d058      	beq.n	80008d4 <main+0x2dc>
			  printf("pressed: %d\n",key);
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <main+0x300>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	4834      	ldr	r0, [pc, #208]	; (80008fc <main+0x304>)
 800082c:	f002 fcfe 	bl	800322c <iprintf>
			  key_test[4] = key;
 8000830:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <main+0x300>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	723b      	strb	r3, [r7, #8]
			  state = FIRST;
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <main+0x2fc>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
			  tick = HAL_GetTick();
 8000840:	f000 fd7a 	bl	8001338 <HAL_GetTick>
 8000844:	61f8      	str	r0, [r7, #28]
			  uint8_t check = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	75fb      	strb	r3, [r7, #23]
			  for(uint8_t j=0;j<5;j++){
 800084a:	2300      	movs	r3, #0
 800084c:	75bb      	strb	r3, [r7, #22]
 800084e:	e013      	b.n	8000878 <main+0x280>
				  if(key_test[j]==password[j])
 8000850:	7dbb      	ldrb	r3, [r7, #22]
 8000852:	f107 0220 	add.w	r2, r7, #32
 8000856:	4413      	add	r3, r2
 8000858:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 800085c:	7dbb      	ldrb	r3, [r7, #22]
 800085e:	f107 0120 	add.w	r1, r7, #32
 8000862:	440b      	add	r3, r1
 8000864:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000868:	429a      	cmp	r2, r3
 800086a:	d102      	bne.n	8000872 <main+0x27a>
				  {
					  check++;
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	3301      	adds	r3, #1
 8000870:	75fb      	strb	r3, [r7, #23]
			  for(uint8_t j=0;j<5;j++){
 8000872:	7dbb      	ldrb	r3, [r7, #22]
 8000874:	3301      	adds	r3, #1
 8000876:	75bb      	strb	r3, [r7, #22]
 8000878:	7dbb      	ldrb	r3, [r7, #22]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d9e8      	bls.n	8000850 <main+0x258>
				  }
			  }
			  if(check==5){
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	2b05      	cmp	r3, #5
 8000882:	d111      	bne.n	80008a8 <main+0x2b0>
				  printf("Password OK");
 8000884:	481e      	ldr	r0, [pc, #120]	; (8000900 <main+0x308>)
 8000886:	f002 fcd1 	bl	800322c <iprintf>
				  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2101      	movs	r1, #1
 800088e:	481d      	ldr	r0, [pc, #116]	; (8000904 <main+0x30c>)
 8000890:	f001 f854 	bl	800193c <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 8000894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000898:	f000 fd5a 	bl	8001350 <HAL_Delay>
				  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4818      	ldr	r0, [pc, #96]	; (8000904 <main+0x30c>)
 80008a2:	f001 f84b 	bl	800193c <HAL_GPIO_WritePin>
 80008a6:	e002      	b.n	80008ae <main+0x2b6>
			  }
			  else printf("Password WRONG!!!");
 80008a8:	4817      	ldr	r0, [pc, #92]	; (8000908 <main+0x310>)
 80008aa:	f002 fcbf 	bl	800322c <iprintf>
			  for(uint8_t i=0; i<5;i++) key_test[i]=0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	757b      	strb	r3, [r7, #21]
 80008b2:	e009      	b.n	80008c8 <main+0x2d0>
 80008b4:	7d7b      	ldrb	r3, [r7, #21]
 80008b6:	f107 0220 	add.w	r2, r7, #32
 80008ba:	4413      	add	r3, r2
 80008bc:	2200      	movs	r2, #0
 80008be:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80008c2:	7d7b      	ldrb	r3, [r7, #21]
 80008c4:	3301      	adds	r3, #1
 80008c6:	757b      	strb	r3, [r7, #21]
 80008c8:	7d7b      	ldrb	r3, [r7, #21]
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d9f2      	bls.n	80008b4 <main+0x2bc>
			  state = FIRST;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <main+0x2fc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]

		  }
		  if(HAL_GetTick() >= (tick+TIMEOUT)){
 80008d4:	f000 fd30 	bl	8001338 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d323      	bcc.n	800092c <main+0x334>
			  for(uint8_t i=0; i<5;i++) key_test[i]=0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	753b      	strb	r3, [r7, #20]
 80008e8:	e01a      	b.n	8000920 <main+0x328>
 80008ea:	bf00      	nop
 80008ec:	200000e4 	.word	0x200000e4
 80008f0:	0800403c 	.word	0x0800403c
 80008f4:	20000090 	.word	0x20000090
 80008f8:	20000000 	.word	0x20000000
 80008fc:	0800400c 	.word	0x0800400c
 8000900:	0800401c 	.word	0x0800401c
 8000904:	40020400 	.word	0x40020400
 8000908:	08004028 	.word	0x08004028
 800090c:	7d3b      	ldrb	r3, [r7, #20]
 800090e:	f107 0220 	add.w	r2, r7, #32
 8000912:	4413      	add	r3, r2
 8000914:	2200      	movs	r2, #0
 8000916:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800091a:	7d3b      	ldrb	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	753b      	strb	r3, [r7, #20]
 8000920:	7d3b      	ldrb	r3, [r7, #20]
 8000922:	2b04      	cmp	r3, #4
 8000924:	d9f2      	bls.n	800090c <main+0x314>
			  state = FIRST;
 8000926:	4b03      	ldr	r3, [pc, #12]	; (8000934 <main+0x33c>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
		  }
		  key = -1;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <main+0x340>)
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	701a      	strb	r2, [r3, #0]
	  if(state == FIRST){
 8000932:	e67f      	b.n	8000634 <main+0x3c>
 8000934:	20000090 	.word	0x20000090
 8000938:	20000000 	.word	0x20000000

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	2230      	movs	r2, #48	; 0x30
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fc66 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <SystemClock_Config+0xcc>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <SystemClock_Config+0xcc>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <SystemClock_Config+0xd0>)
 8000986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <SystemClock_Config+0xd0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800099c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009b0:	23a8      	movs	r3, #168	; 0xa8
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b8:	2307      	movs	r3, #7
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 ffd5 	bl	8001970 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009cc:	f000 fa9e 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2302      	movs	r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2105      	movs	r1, #5
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fa2e 	bl	8001e50 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009fa:	f000 fa87 	bl	8000f0c <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3750      	adds	r7, #80	; 0x50
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a36:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000a3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a44:	2263      	movs	r2, #99	; 0x63
 8000a46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a56:	f001 fbed 	bl	8002234 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a60:	f000 fa54 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a72:	f001 fd36 	bl	80024e2 <HAL_TIM_ConfigClockSource>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a7c:	f000 fa46 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a8e:	f001 ff41 	bl	8002914 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 fa38 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000e4 	.word	0x200000e4

08000aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_USART3_UART_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART3_UART_Init+0x4c>)
 8000ae0:	f001 ffa8 	bl	8002a34 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aea:	f000 fa0f 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000a4 	.word	0x200000a4
 8000af8:	40004800 	.word	0x40004800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4aa0      	ldr	r2, [pc, #640]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b9e      	ldr	r3, [pc, #632]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	4b9a      	ldr	r3, [pc, #616]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a99      	ldr	r2, [pc, #612]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b97      	ldr	r3, [pc, #604]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	4b93      	ldr	r3, [pc, #588]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a92      	ldr	r2, [pc, #584]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b90      	ldr	r3, [pc, #576]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	4b8c      	ldr	r3, [pc, #560]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a8b      	ldr	r2, [pc, #556]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b89      	ldr	r3, [pc, #548]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b85      	ldr	r3, [pc, #532]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a84      	ldr	r2, [pc, #528]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b82      	ldr	r3, [pc, #520]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b7e      	ldr	r3, [pc, #504]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a7d      	ldr	r2, [pc, #500]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b7b      	ldr	r3, [pc, #492]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b77      	ldr	r3, [pc, #476]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a76      	ldr	r2, [pc, #472]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b74      	ldr	r3, [pc, #464]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b70      	ldr	r3, [pc, #448]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a6f      	ldr	r2, [pc, #444]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b6d      	ldr	r3, [pc, #436]	; (8000d9c <MX_GPIO_Init+0x2a0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000bf8:	4869      	ldr	r0, [pc, #420]	; (8000da0 <MX_GPIO_Init+0x2a4>)
 8000bfa:	f000 fe9f 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c04:	4867      	ldr	r0, [pc, #412]	; (8000da4 <MX_GPIO_Init+0x2a8>)
 8000c06:	f000 fe99 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2142      	movs	r1, #66	; 0x42
 8000c0e:	4866      	ldr	r0, [pc, #408]	; (8000da8 <MX_GPIO_Init+0x2ac>)
 8000c10:	f000 fe94 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
  GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 8000c14:	2378      	movs	r3, #120	; 0x78
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4861      	ldr	r0, [pc, #388]	; (8000dac <MX_GPIO_Init+0x2b0>)
 8000c28:	f000 fcc6 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	4b5f      	ldr	r3, [pc, #380]	; (8000db0 <MX_GPIO_Init+0x2b4>)
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	485c      	ldr	r0, [pc, #368]	; (8000db4 <MX_GPIO_Init+0x2b8>)
 8000c42:	f000 fcb9 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
  GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 8000c46:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c4c:	2311      	movs	r3, #17
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4850      	ldr	r0, [pc, #320]	; (8000da0 <MX_GPIO_Init+0x2a4>)
 8000c60:	f000 fcaa 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c64:	2332      	movs	r3, #50	; 0x32
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	484d      	ldr	r0, [pc, #308]	; (8000db4 <MX_GPIO_Init+0x2b8>)
 8000c80:	f000 fc9a 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c84:	2386      	movs	r3, #134	; 0x86
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c94:	230b      	movs	r3, #11
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4846      	ldr	r0, [pc, #280]	; (8000db8 <MX_GPIO_Init+0x2bc>)
 8000ca0:	f000 fc8a 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ca4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4839      	ldr	r0, [pc, #228]	; (8000da4 <MX_GPIO_Init+0x2a8>)
 8000cbe:	f000 fc7b 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Row1_Pin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cc6:	2311      	movs	r3, #17
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4833      	ldr	r0, [pc, #204]	; (8000da8 <MX_GPIO_Init+0x2ac>)
 8000cda:	f000 fc6d 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	482a      	ldr	r0, [pc, #168]	; (8000da4 <MX_GPIO_Init+0x2a8>)
 8000cfc:	f000 fc5c 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d00:	2340      	movs	r3, #64	; 0x40
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4824      	ldr	r0, [pc, #144]	; (8000da8 <MX_GPIO_Init+0x2ac>)
 8000d18:	f000 fc4e 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481e      	ldr	r0, [pc, #120]	; (8000da8 <MX_GPIO_Init+0x2ac>)
 8000d30:	f000 fc42 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d34:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d46:	230a      	movs	r3, #10
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4819      	ldr	r0, [pc, #100]	; (8000db8 <MX_GPIO_Init+0x2bc>)
 8000d52:	f000 fc31 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_GPIO_Init+0x2bc>)
 8000d6c:	f000 fc24 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d82:	230b      	movs	r3, #11
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_GPIO_Init+0x2ac>)
 8000d8e:	f000 fc13 	bl	80015b8 <HAL_GPIO_Init>

}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40021400 	.word	0x40021400
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40021800 	.word	0x40021800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	10110000 	.word	0x10110000
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
			{ 1, 2, 3, 21 },
			{ 4, 5, 6, 22 },
			{ 7, 8, 9, 23 },
			{ 11, 0, 12, 24 },
	};
	if (key == -1) {
 8000dc4:	4b4b      	ldr	r3, [pc, #300]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dce:	d142      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x9a>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET) key = keyboard[row][0];
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000dd4:	f000 fd9a 	bl	800190c <HAL_GPIO_ReadPin>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d108      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000dde:	4b47      	ldr	r3, [pc, #284]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	4413      	add	r3, r2
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000dee:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET) key = keyboard[row][1];
 8000df0:	2140      	movs	r1, #64	; 0x40
 8000df2:	4841      	ldr	r0, [pc, #260]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000df4:	f000 fd8a 	bl	800190c <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x56>
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a3f      	ldr	r2, [pc, #252]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	3304      	adds	r3, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b25a      	sxtb	r2, r3
 8000e0e:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e10:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET) key = keyboard[row][3];
 8000e12:	2120      	movs	r1, #32
 8000e14:	4838      	ldr	r0, [pc, #224]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e16:	f000 fd79 	bl	800190c <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d109      	bne.n	8000e34 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a36      	ldr	r2, [pc, #216]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	4413      	add	r3, r2
 8000e2a:	330c      	adds	r3, #12
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e32:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET) key = keyboard[row][4];
 8000e34:	2110      	movs	r1, #16
 8000e36:	4830      	ldr	r0, [pc, #192]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e38:	f000 fd68 	bl	800190c <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000e48:	3301      	adds	r3, #1
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	4413      	add	r3, r2
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e54:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2102      	movs	r1, #2
 8000e5a:	482a      	ldr	r0, [pc, #168]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e5c:	f000 fd6e 	bl	800193c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e66:	4828      	ldr	r0, [pc, #160]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e68:	f000 fd68 	bl	800193c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	4825      	ldr	r0, [pc, #148]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e72:	f000 fd63 	bl	800193c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7c:	4822      	ldr	r0, [pc, #136]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e7e:	f000 fd5d 	bl	800193c <HAL_GPIO_WritePin>
	switch (row) {
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d830      	bhi.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x130>
 8000e8a:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000eb3 	.word	0x08000eb3
 8000e98:	08000ec7 	.word	0x08000ec7
 8000e9c:	08000ed9 	.word	0x08000ed9
	case 0: row = 0; HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); break;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4816      	ldr	r0, [pc, #88]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000eac:	f000 fd46 	bl	800193c <HAL_GPIO_WritePin>
 8000eb0:	e01c      	b.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x130>
	case 1: row = 1; HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); break;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebe:	4812      	ldr	r0, [pc, #72]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ec0:	f000 fd3c 	bl	800193c <HAL_GPIO_WritePin>
 8000ec4:	e012      	b.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x130>
	case 2: row = 2; HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); break;
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ed2:	f000 fd33 	bl	800193c <HAL_GPIO_WritePin>
 8000ed6:	e009      	b.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x130>
	case 3: row = 3; HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); break;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000eda:	2203      	movs	r2, #3
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ee6:	f000 fd29 	bl	800193c <HAL_GPIO_WritePin>
 8000eea:	bf00      	nop
	}
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	20000094 	.word	0x20000094
 8000f00:	08004044 	.word	0x08004044
 8000f04:	40021800 	.word	0x40021800
 8000f08:	40021400 	.word	0x40021400

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d115      	bne.n	8000faa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	201c      	movs	r0, #28
 8000fa0:	f000 fad3 	bl	800154a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa4:	201c      	movs	r0, #28
 8000fa6:	f000 faec 	bl	8001582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_UART_MspInit+0x84>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12c      	bne.n	8001034 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_UART_MspInit+0x88>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_UART_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001024:	2307      	movs	r3, #7
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_UART_MspInit+0x8c>)
 8001030:	f000 fac2 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40004800 	.word	0x40004800
 8001040:	40023800 	.word	0x40023800
 8001044:	40020c00 	.word	0x40020c00

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f938 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <TIM2_IRQHandler+0x10>)
 80010aa:	f001 f912 	bl	80022d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000e4 	.word	0x200000e4

080010b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e00a      	b.n	80010e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ca:	f3af 8000 	nop.w
 80010ce:	4601      	mov	r1, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf0      	blt.n	80010ca <_read+0x12>
	}

return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e009      	b.n	8001118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa66 	bl	80005de <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf1      	blt.n	8001104 <_write+0x12>
	}
	return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_close>:

int _close(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	return -1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001152:	605a      	str	r2, [r3, #4]
	return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_isatty>:

int _isatty(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x50>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x16>
		heap_end = &end;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <_sbrk+0x50>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <_sbrk+0x54>)
 80011a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <_sbrk+0x50>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <_sbrk+0x50>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	466a      	mov	r2, sp
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d907      	bls.n	80011ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011be:	f002 f803 	bl	80031c8 <__errno>
 80011c2:	4602      	mov	r2, r0
 80011c4:	230c      	movs	r3, #12
 80011c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	e006      	b.n	80011dc <_sbrk+0x48>
	}

	heap_end += incr;
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <_sbrk+0x50>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <_sbrk+0x50>)
 80011d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000098 	.word	0x20000098
 80011e8:	20000130 	.word	0x20000130

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <SystemInit+0x28>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a07      	ldr	r2, [pc, #28]	; (8001214 <SystemInit+0x28>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SystemInit+0x28>)
 8001202:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001206:	609a      	str	r2, [r3, #8]
#endif
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800121c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800121e:	e003      	b.n	8001228 <LoopCopyDataInit>

08001220 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001222:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001224:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001226:	3104      	adds	r1, #4

08001228 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800122c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800122e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001230:	d3f6      	bcc.n	8001220 <CopyDataInit>
  ldr  r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001234:	e002      	b.n	800123c <LoopFillZerobss>

08001236 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001236:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001238:	f842 3b04 	str.w	r3, [r2], #4

0800123c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800123e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001240:	d3f9      	bcc.n	8001236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001242:	f7ff ffd3 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f001 ffc5 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff f9d5 	bl	80005f8 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001250:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001254:	08004144 	.word	0x08004144
  ldr  r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800125c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001260:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001264:	2000012c 	.word	0x2000012c

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f94d 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fe3c 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f965 	bl	800159e <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f92d 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000004 	.word	0x20000004
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000008 	.word	0x20000008

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2000000c 	.word	0x2000000c
 8001334:	20000124 	.word	0x20000124

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000124 	.word	0x20000124

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_Delay+0x40>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000000c 	.word	0x2000000c

08001394 <__NVIC_SetPriorityGrouping>:
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff29 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff3e 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff31 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffa2 	bl	80014f0 <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e177      	b.n	80018c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8166 	bne.w	80018be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d00b      	beq.n	8001612 <HAL_GPIO_Init+0x5a>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001606:	2b11      	cmp	r3, #17
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b12      	cmp	r3, #18
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0xfc>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80c0 	beq.w	80018be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_GPIO_Init+0x320>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a64      	ldr	r2, [pc, #400]	; (80018d8 <HAL_GPIO_Init+0x320>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <HAL_GPIO_Init+0x320>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a60      	ldr	r2, [pc, #384]	; (80018dc <HAL_GPIO_Init+0x324>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_GPIO_Init+0x328>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d037      	beq.n	80017f6 <HAL_GPIO_Init+0x23e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a56      	ldr	r2, [pc, #344]	; (80018e4 <HAL_GPIO_Init+0x32c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d031      	beq.n	80017f2 <HAL_GPIO_Init+0x23a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a55      	ldr	r2, [pc, #340]	; (80018e8 <HAL_GPIO_Init+0x330>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_GPIO_Init+0x236>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a54      	ldr	r2, [pc, #336]	; (80018ec <HAL_GPIO_Init+0x334>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d025      	beq.n	80017ea <HAL_GPIO_Init+0x232>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a53      	ldr	r2, [pc, #332]	; (80018f0 <HAL_GPIO_Init+0x338>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d01f      	beq.n	80017e6 <HAL_GPIO_Init+0x22e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_GPIO_Init+0x33c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d019      	beq.n	80017e2 <HAL_GPIO_Init+0x22a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_GPIO_Init+0x340>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_Init+0x226>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a50      	ldr	r2, [pc, #320]	; (80018fc <HAL_GPIO_Init+0x344>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00d      	beq.n	80017da <HAL_GPIO_Init+0x222>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4f      	ldr	r2, [pc, #316]	; (8001900 <HAL_GPIO_Init+0x348>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_GPIO_Init+0x21e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <HAL_GPIO_Init+0x34c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_GPIO_Init+0x21a>
 80017ce:	2309      	movs	r3, #9
 80017d0:	e012      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017d2:	230a      	movs	r3, #10
 80017d4:	e010      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017d6:	2308      	movs	r3, #8
 80017d8:	e00e      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017da:	2307      	movs	r3, #7
 80017dc:	e00c      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00a      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017f6:	2300      	movs	r3, #0
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	4934      	ldr	r1, [pc, #208]	; (80018dc <HAL_GPIO_Init+0x324>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001816:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800183a:	4a33      	ldr	r2, [pc, #204]	; (8001908 <HAL_GPIO_Init+0x350>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001864:	4a28      	ldr	r2, [pc, #160]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_GPIO_Init+0x350>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_GPIO_Init+0x350>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_GPIO_Init+0x350>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	f67f ae84 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	3724      	adds	r7, #36	; 0x24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40013800 	.word	0x40013800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40021c00 	.word	0x40021c00
 8001900:	40022000 	.word	0x40022000
 8001904:	40022400 	.word	0x40022400
 8001908:	40013c00 	.word	0x40013c00

0800190c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e001      	b.n	800192e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
 8001948:	4613      	mov	r3, r2
 800194a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001958:	e003      	b.n	8001962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	041a      	lsls	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	619a      	str	r2, [r3, #24]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e25b      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d075      	beq.n	8001a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198e:	4ba3      	ldr	r3, [pc, #652]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b04      	cmp	r3, #4
 8001998:	d00c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199a:	4ba0      	ldr	r3, [pc, #640]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d112      	bne.n	80019cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b9d      	ldr	r3, [pc, #628]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b99      	ldr	r3, [pc, #612]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d05b      	beq.n	8001a78 <HAL_RCC_OscConfig+0x108>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d157      	bne.n	8001a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e236      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x74>
 80019d6:	4b91      	ldr	r3, [pc, #580]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a90      	ldr	r2, [pc, #576]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0xb0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x98>
 80019ee:	4b8b      	ldr	r3, [pc, #556]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a8a      	ldr	r2, [pc, #552]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b88      	ldr	r3, [pc, #544]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a87      	ldr	r2, [pc, #540]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xb0>
 8001a08:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a83      	ldr	r2, [pc, #524]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b81      	ldr	r3, [pc, #516]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a80      	ldr	r2, [pc, #512]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fc86 	bl	8001338 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fc82 	bl	8001338 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e1fb      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xc0>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fc72 	bl	8001338 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fc6e 	bl	8001338 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1e7      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0xe8>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a86:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a92:	4b62      	ldr	r3, [pc, #392]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9e:	4b5f      	ldr	r3, [pc, #380]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d116      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x152>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e1bb      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4952      	ldr	r1, [pc, #328]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	e03a      	b.n	8001b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_RCC_OscConfig+0x2b0>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fc27 	bl	8001338 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff fc23 	bl	8001338 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e19c      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4940      	ldr	r1, [pc, #256]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e015      	b.n	8001b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b22:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <HAL_RCC_OscConfig+0x2b0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fc06 	bl	8001338 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff fc02 	bl	8001338 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e17b      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d030      	beq.n	8001bbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d016      	beq.n	8001b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x2b4>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff fbe6 	bl	8001338 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff fbe2 	bl	8001338 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e15b      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x200>
 8001b8e:	e015      	b.n	8001bbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x2b4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fbcf 	bl	8001338 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fbcb 	bl	8001338 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e144      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a0 	beq.w	8001d0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10f      	bne.n	8001bfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_OscConfig+0x2b8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d121      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_RCC_OscConfig+0x2b8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_RCC_OscConfig+0x2b8>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fb91 	bl	8001338 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	e011      	b.n	8001c3e <HAL_RCC_OscConfig+0x2ce>
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470000 	.word	0x42470000
 8001c24:	42470e80 	.word	0x42470e80
 8001c28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7ff fb84 	bl	8001338 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e0fd      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d106      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
 8001c52:	4b7d      	ldr	r3, [pc, #500]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a7c      	ldr	r2, [pc, #496]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	e01c      	b.n	8001c9a <HAL_RCC_OscConfig+0x32a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d10c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x312>
 8001c68:	4b77      	ldr	r3, [pc, #476]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	4a76      	ldr	r2, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a73      	ldr	r2, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c80:	e00b      	b.n	8001c9a <HAL_RCC_OscConfig+0x32a>
 8001c82:	4b71      	ldr	r3, [pc, #452]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a70      	ldr	r2, [pc, #448]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a6d      	ldr	r2, [pc, #436]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d015      	beq.n	8001cce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fb49 	bl	8001338 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff fb45 	bl	8001338 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0bc      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ee      	beq.n	8001caa <HAL_RCC_OscConfig+0x33a>
 8001ccc:	e014      	b.n	8001cf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fb33 	bl	8001338 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7ff fb2f 	bl	8001338 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0a6      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cec:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ee      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d105      	bne.n	8001d0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfe:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a51      	ldr	r2, [pc, #324]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8092 	beq.w	8001e38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d14:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d05c      	beq.n	8001dda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d141      	bne.n	8001dac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d28:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <HAL_RCC_OscConfig+0x4dc>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fb03 	bl	8001338 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d36:	f7ff faff 	bl	8001338 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e078      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69da      	ldr	r2, [r3, #28]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	019b      	lsls	r3, r3, #6
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	085b      	lsrs	r3, r3, #1
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	041b      	lsls	r3, r3, #16
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
 8001d78:	4933      	ldr	r1, [pc, #204]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7e:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <HAL_RCC_OscConfig+0x4dc>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fad8 	bl	8001338 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff fad4 	bl	8001338 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e04d      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x41c>
 8001daa:	e045      	b.n	8001e38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x4dc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fac1 	bl	8001338 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fabd 	bl	8001338 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e036      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x44a>
 8001dd8:	e02e      	b.n	8001e38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e029      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_RCC_OscConfig+0x4d8>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d11c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d115      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d10d      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d106      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40007000 	.word	0x40007000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470060 	.word	0x42470060

08001e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0cc      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d90c      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b8      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	494d      	ldr	r1, [pc, #308]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d044      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d119      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e067      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4934      	ldr	r1, [pc, #208]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7ff f9fa 	bl	8001338 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7ff f9f6 	bl	8001338 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e04f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d20c      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e032      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4916      	ldr	r1, [pc, #88]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	490e      	ldr	r1, [pc, #56]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fd6:	f000 f821 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fda:	4601      	mov	r1, r0
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	fa21 f303 	lsr.w	r3, r1, r3
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f95a 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00
 800200c:	40023800 	.word	0x40023800
 8002010:	08004084 	.word	0x08004084
 8002014:	20000004 	.word	0x20000004
 8002018:	20000008 	.word	0x20000008

0800201c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b04      	cmp	r3, #4
 800203c:	d007      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x32>
 800203e:	2b08      	cmp	r3, #8
 8002040:	d008      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x38>
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 80b4 	bne.w	80021b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002048:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800204a:	60bb      	str	r3, [r7, #8]
       break;
 800204c:	e0b3      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800204e:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002050:	60bb      	str	r3, [r7, #8]
      break;
 8002052:	e0b0      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002054:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800205c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205e:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d04a      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206a:	4b55      	ldr	r3, [pc, #340]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	f04f 0400 	mov.w	r4, #0
 8002074:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	ea03 0501 	and.w	r5, r3, r1
 8002080:	ea04 0602 	and.w	r6, r4, r2
 8002084:	4629      	mov	r1, r5
 8002086:	4632      	mov	r2, r6
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	f04f 0400 	mov.w	r4, #0
 8002090:	0154      	lsls	r4, r2, #5
 8002092:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002096:	014b      	lsls	r3, r1, #5
 8002098:	4619      	mov	r1, r3
 800209a:	4622      	mov	r2, r4
 800209c:	1b49      	subs	r1, r1, r5
 800209e:	eb62 0206 	sbc.w	r2, r2, r6
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	f04f 0400 	mov.w	r4, #0
 80020aa:	0194      	lsls	r4, r2, #6
 80020ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020b0:	018b      	lsls	r3, r1, #6
 80020b2:	1a5b      	subs	r3, r3, r1
 80020b4:	eb64 0402 	sbc.w	r4, r4, r2
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	00e2      	lsls	r2, r4, #3
 80020c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020c6:	00d9      	lsls	r1, r3, #3
 80020c8:	460b      	mov	r3, r1
 80020ca:	4614      	mov	r4, r2
 80020cc:	195b      	adds	r3, r3, r5
 80020ce:	eb44 0406 	adc.w	r4, r4, r6
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	0262      	lsls	r2, r4, #9
 80020dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020e0:	0259      	lsls	r1, r3, #9
 80020e2:	460b      	mov	r3, r1
 80020e4:	4614      	mov	r4, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	4621      	mov	r1, r4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f04f 0400 	mov.w	r4, #0
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	f7fe f8cc 	bl	8000290 <__aeabi_uldivmod>
 80020f8:	4603      	mov	r3, r0
 80020fa:	460c      	mov	r4, r1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e049      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	f04f 0400 	mov.w	r4, #0
 800210a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	ea03 0501 	and.w	r5, r3, r1
 8002116:	ea04 0602 	and.w	r6, r4, r2
 800211a:	4629      	mov	r1, r5
 800211c:	4632      	mov	r2, r6
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	f04f 0400 	mov.w	r4, #0
 8002126:	0154      	lsls	r4, r2, #5
 8002128:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800212c:	014b      	lsls	r3, r1, #5
 800212e:	4619      	mov	r1, r3
 8002130:	4622      	mov	r2, r4
 8002132:	1b49      	subs	r1, r1, r5
 8002134:	eb62 0206 	sbc.w	r2, r2, r6
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	f04f 0400 	mov.w	r4, #0
 8002140:	0194      	lsls	r4, r2, #6
 8002142:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002146:	018b      	lsls	r3, r1, #6
 8002148:	1a5b      	subs	r3, r3, r1
 800214a:	eb64 0402 	sbc.w	r4, r4, r2
 800214e:	f04f 0100 	mov.w	r1, #0
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	00e2      	lsls	r2, r4, #3
 8002158:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800215c:	00d9      	lsls	r1, r3, #3
 800215e:	460b      	mov	r3, r1
 8002160:	4614      	mov	r4, r2
 8002162:	195b      	adds	r3, r3, r5
 8002164:	eb44 0406 	adc.w	r4, r4, r6
 8002168:	f04f 0100 	mov.w	r1, #0
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	02a2      	lsls	r2, r4, #10
 8002172:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002176:	0299      	lsls	r1, r3, #10
 8002178:	460b      	mov	r3, r1
 800217a:	4614      	mov	r4, r2
 800217c:	4618      	mov	r0, r3
 800217e:	4621      	mov	r1, r4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f04f 0400 	mov.w	r4, #0
 8002186:	461a      	mov	r2, r3
 8002188:	4623      	mov	r3, r4
 800218a:	f7fe f881 	bl	8000290 <__aeabi_uldivmod>
 800218e:	4603      	mov	r3, r0
 8002190:	460c      	mov	r4, r1
 8002192:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	3301      	adds	r3, #1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	60bb      	str	r3, [r7, #8]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021b2:	60bb      	str	r3, [r7, #8]
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	68bb      	ldr	r3, [r7, #8]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200

080021cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021e8:	f7ff fff0 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021ec:	4601      	mov	r1, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0a9b      	lsrs	r3, r3, #10
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4a03      	ldr	r2, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	08004094 	.word	0x08004094

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002210:	f7ff ffdc 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8002214:	4601      	mov	r1, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0b5b      	lsrs	r3, r3, #13
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	08004094 	.word	0x08004094

08002234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e01d      	b.n	8002282 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fe86 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f000 fa14 	bl	80026a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d007      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d122      	bne.n	800232e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d11b      	bne.n	800232e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0202 	mvn.w	r2, #2
 80022fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f9a5 	bl	8002664 <HAL_TIM_IC_CaptureCallback>
 800231a:	e005      	b.n	8002328 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f997 	bl	8002650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9a8 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b04      	cmp	r3, #4
 800233a:	d122      	bne.n	8002382 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d11b      	bne.n	8002382 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f06f 0204 	mvn.w	r2, #4
 8002352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f97b 	bl	8002664 <HAL_TIM_IC_CaptureCallback>
 800236e:	e005      	b.n	800237c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f96d 	bl	8002650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f97e 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b08      	cmp	r3, #8
 800238e:	d122      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b08      	cmp	r3, #8
 800239c:	d11b      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f06f 0208 	mvn.w	r2, #8
 80023a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f951 	bl	8002664 <HAL_TIM_IC_CaptureCallback>
 80023c2:	e005      	b.n	80023d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f943 	bl	8002650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f954 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d122      	bne.n	800242a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d11b      	bne.n	800242a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f06f 0210 	mvn.w	r2, #16
 80023fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2208      	movs	r2, #8
 8002400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f927 	bl	8002664 <HAL_TIM_IC_CaptureCallback>
 8002416:	e005      	b.n	8002424 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f919 	bl	8002650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f92a 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10e      	bne.n	8002456 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0201 	mvn.w	r2, #1
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7fe fcb3 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	2b80      	cmp	r3, #128	; 0x80
 8002462:	d10e      	bne.n	8002482 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b80      	cmp	r3, #128	; 0x80
 8002470:	d107      	bne.n	8002482 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800247a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 facf 	bl	8002a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	d10e      	bne.n	80024ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d107      	bne.n	80024ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f8ef 	bl	800268c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d10e      	bne.n	80024da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d107      	bne.n	80024da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f06f 0220 	mvn.w	r2, #32
 80024d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa99 	bl	8002a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_ConfigClockSource+0x18>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0a6      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x166>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002518:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002520:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d067      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x120>
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d80b      	bhi.n	800254e <HAL_TIM_ConfigClockSource+0x6c>
 8002536:	2b10      	cmp	r3, #16
 8002538:	d073      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x140>
 800253a:	2b10      	cmp	r3, #16
 800253c:	d802      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x62>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d06f      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002542:	e078      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002544:	2b20      	cmp	r3, #32
 8002546:	d06c      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x140>
 8002548:	2b30      	cmp	r3, #48	; 0x30
 800254a:	d06a      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800254c:	e073      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800254e:	2b70      	cmp	r3, #112	; 0x70
 8002550:	d00d      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x8c>
 8002552:	2b70      	cmp	r3, #112	; 0x70
 8002554:	d804      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x7e>
 8002556:	2b50      	cmp	r3, #80	; 0x50
 8002558:	d033      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xe0>
 800255a:	2b60      	cmp	r3, #96	; 0x60
 800255c:	d041      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800255e:	e06a      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002564:	d066      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x152>
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	d017      	beq.n	800259c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800256c:	e063      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6899      	ldr	r1, [r3, #8]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f000 f9a9 	bl	80028d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002590:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	609a      	str	r2, [r3, #8]
      break;
 800259a:	e04c      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f000 f992 	bl	80028d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025be:	609a      	str	r2, [r3, #8]
      break;
 80025c0:	e039      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f000 f906 	bl	80027e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2150      	movs	r1, #80	; 0x50
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f95f 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 80025e0:	e029      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f000 f925 	bl	800283e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2160      	movs	r1, #96	; 0x60
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f94f 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 8002600:	e019      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	461a      	mov	r2, r3
 8002610:	f000 f8e6 	bl	80027e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2140      	movs	r1, #64	; 0x40
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f93f 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 8002620:	e009      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f000 f936 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 8002632:	e000      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002634:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <TIM_Base_SetConfig+0x114>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d013      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d00f      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3d      	ldr	r2, [pc, #244]	; (80027b8 <TIM_Base_SetConfig+0x118>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00b      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <TIM_Base_SetConfig+0x11c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d007      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a3b      	ldr	r2, [pc, #236]	; (80027c0 <TIM_Base_SetConfig+0x120>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <TIM_Base_SetConfig+0x124>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d108      	bne.n	80026f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <TIM_Base_SetConfig+0x114>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02b      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d027      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <TIM_Base_SetConfig+0x118>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d023      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <TIM_Base_SetConfig+0x11c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01f      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a2a      	ldr	r2, [pc, #168]	; (80027c0 <TIM_Base_SetConfig+0x120>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01b      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <TIM_Base_SetConfig+0x124>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d017      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <TIM_Base_SetConfig+0x128>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a27      	ldr	r2, [pc, #156]	; (80027cc <TIM_Base_SetConfig+0x12c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00f      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a26      	ldr	r2, [pc, #152]	; (80027d0 <TIM_Base_SetConfig+0x130>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00b      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <TIM_Base_SetConfig+0x134>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <TIM_Base_SetConfig+0x138>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d003      	beq.n	8002752 <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a23      	ldr	r2, [pc, #140]	; (80027dc <TIM_Base_SetConfig+0x13c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d108      	bne.n	8002764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <TIM_Base_SetConfig+0x114>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <TIM_Base_SetConfig+0xf8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <TIM_Base_SetConfig+0x124>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d103      	bne.n	80027a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	615a      	str	r2, [r3, #20]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40000800 	.word	0x40000800
 80027c0:	40000c00 	.word	0x40000c00
 80027c4:	40010400 	.word	0x40010400
 80027c8:	40014000 	.word	0x40014000
 80027cc:	40014400 	.word	0x40014400
 80027d0:	40014800 	.word	0x40014800
 80027d4:	40001800 	.word	0x40001800
 80027d8:	40001c00 	.word	0x40001c00
 80027dc:	40002000 	.word	0x40002000

080027e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f023 0201 	bic.w	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800280a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f023 030a 	bic.w	r3, r3, #10
 800281c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	621a      	str	r2, [r3, #32]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800283e:	b480      	push	{r7}
 8002840:	b087      	sub	sp, #28
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0210 	bic.w	r2, r3, #16
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	031b      	lsls	r3, r3, #12
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800287a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 0307 	orr.w	r3, r3, #7
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	021a      	lsls	r2, r3, #8
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002928:	2302      	movs	r3, #2
 800292a:	e05a      	b.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d022      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d01d      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d018      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10c      	bne.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40000800 	.word	0x40000800
 80029fc:	40000c00 	.word	0x40000c00
 8002a00:	40010400 	.word	0x40010400
 8002a04:	40014000 	.word	0x40014000
 8002a08:	40001800 	.word	0x40001800

08002a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e03f      	b.n	8002ac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe faac 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f829 	bl	8002ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b12:	f023 030c 	bic.w	r3, r3, #12
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	68f9      	ldr	r1, [r7, #12]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3e:	f040 818b 	bne.w	8002e58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4ac1      	ldr	r2, [pc, #772]	; (8002e4c <UART_SetConfig+0x37c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d005      	beq.n	8002b58 <UART_SetConfig+0x88>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4abf      	ldr	r2, [pc, #764]	; (8002e50 <UART_SetConfig+0x380>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	f040 80bd 	bne.w	8002cd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b58:	f7ff fb58 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8002b5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	461d      	mov	r5, r3
 8002b62:	f04f 0600 	mov.w	r6, #0
 8002b66:	46a8      	mov	r8, r5
 8002b68:	46b1      	mov	r9, r6
 8002b6a:	eb18 0308 	adds.w	r3, r8, r8
 8002b6e:	eb49 0409 	adc.w	r4, r9, r9
 8002b72:	4698      	mov	r8, r3
 8002b74:	46a1      	mov	r9, r4
 8002b76:	eb18 0805 	adds.w	r8, r8, r5
 8002b7a:	eb49 0906 	adc.w	r9, r9, r6
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b92:	4688      	mov	r8, r1
 8002b94:	4691      	mov	r9, r2
 8002b96:	eb18 0005 	adds.w	r0, r8, r5
 8002b9a:	eb49 0106 	adc.w	r1, r9, r6
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	f04f 0600 	mov.w	r6, #0
 8002ba8:	196b      	adds	r3, r5, r5
 8002baa:	eb46 0406 	adc.w	r4, r6, r6
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	f7fd fb6d 	bl	8000290 <__aeabi_uldivmod>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4ba5      	ldr	r3, [pc, #660]	; (8002e54 <UART_SetConfig+0x384>)
 8002bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	461d      	mov	r5, r3
 8002bcc:	f04f 0600 	mov.w	r6, #0
 8002bd0:	46a9      	mov	r9, r5
 8002bd2:	46b2      	mov	sl, r6
 8002bd4:	eb19 0309 	adds.w	r3, r9, r9
 8002bd8:	eb4a 040a 	adc.w	r4, sl, sl
 8002bdc:	4699      	mov	r9, r3
 8002bde:	46a2      	mov	sl, r4
 8002be0:	eb19 0905 	adds.w	r9, r9, r5
 8002be4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bfc:	4689      	mov	r9, r1
 8002bfe:	4692      	mov	sl, r2
 8002c00:	eb19 0005 	adds.w	r0, r9, r5
 8002c04:	eb4a 0106 	adc.w	r1, sl, r6
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	461d      	mov	r5, r3
 8002c0e:	f04f 0600 	mov.w	r6, #0
 8002c12:	196b      	adds	r3, r5, r5
 8002c14:	eb46 0406 	adc.w	r4, r6, r6
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	f7fd fb38 	bl	8000290 <__aeabi_uldivmod>
 8002c20:	4603      	mov	r3, r0
 8002c22:	460c      	mov	r4, r1
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b8b      	ldr	r3, [pc, #556]	; (8002e54 <UART_SetConfig+0x384>)
 8002c28:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	2164      	movs	r1, #100	; 0x64
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	3332      	adds	r3, #50	; 0x32
 8002c3a:	4a86      	ldr	r2, [pc, #536]	; (8002e54 <UART_SetConfig+0x384>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c48:	4498      	add	r8, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	461d      	mov	r5, r3
 8002c4e:	f04f 0600 	mov.w	r6, #0
 8002c52:	46a9      	mov	r9, r5
 8002c54:	46b2      	mov	sl, r6
 8002c56:	eb19 0309 	adds.w	r3, r9, r9
 8002c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c5e:	4699      	mov	r9, r3
 8002c60:	46a2      	mov	sl, r4
 8002c62:	eb19 0905 	adds.w	r9, r9, r5
 8002c66:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c7e:	4689      	mov	r9, r1
 8002c80:	4692      	mov	sl, r2
 8002c82:	eb19 0005 	adds.w	r0, r9, r5
 8002c86:	eb4a 0106 	adc.w	r1, sl, r6
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	461d      	mov	r5, r3
 8002c90:	f04f 0600 	mov.w	r6, #0
 8002c94:	196b      	adds	r3, r5, r5
 8002c96:	eb46 0406 	adc.w	r4, r6, r6
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4623      	mov	r3, r4
 8002c9e:	f7fd faf7 	bl	8000290 <__aeabi_uldivmod>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <UART_SetConfig+0x384>)
 8002caa:	fba3 1302 	umull	r1, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2164      	movs	r1, #100	; 0x64
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	3332      	adds	r3, #50	; 0x32
 8002cbc:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <UART_SetConfig+0x384>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	f003 0207 	and.w	r2, r3, #7
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4442      	add	r2, r8
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	e26f      	b.n	80031b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cd2:	f7ff fa87 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8002cd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	461d      	mov	r5, r3
 8002cdc:	f04f 0600 	mov.w	r6, #0
 8002ce0:	46a8      	mov	r8, r5
 8002ce2:	46b1      	mov	r9, r6
 8002ce4:	eb18 0308 	adds.w	r3, r8, r8
 8002ce8:	eb49 0409 	adc.w	r4, r9, r9
 8002cec:	4698      	mov	r8, r3
 8002cee:	46a1      	mov	r9, r4
 8002cf0:	eb18 0805 	adds.w	r8, r8, r5
 8002cf4:	eb49 0906 	adc.w	r9, r9, r6
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d0c:	4688      	mov	r8, r1
 8002d0e:	4691      	mov	r9, r2
 8002d10:	eb18 0005 	adds.w	r0, r8, r5
 8002d14:	eb49 0106 	adc.w	r1, r9, r6
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	f04f 0600 	mov.w	r6, #0
 8002d22:	196b      	adds	r3, r5, r5
 8002d24:	eb46 0406 	adc.w	r4, r6, r6
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f7fd fab0 	bl	8000290 <__aeabi_uldivmod>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <UART_SetConfig+0x384>)
 8002d38:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	461d      	mov	r5, r3
 8002d46:	f04f 0600 	mov.w	r6, #0
 8002d4a:	46a9      	mov	r9, r5
 8002d4c:	46b2      	mov	sl, r6
 8002d4e:	eb19 0309 	adds.w	r3, r9, r9
 8002d52:	eb4a 040a 	adc.w	r4, sl, sl
 8002d56:	4699      	mov	r9, r3
 8002d58:	46a2      	mov	sl, r4
 8002d5a:	eb19 0905 	adds.w	r9, r9, r5
 8002d5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d76:	4689      	mov	r9, r1
 8002d78:	4692      	mov	sl, r2
 8002d7a:	eb19 0005 	adds.w	r0, r9, r5
 8002d7e:	eb4a 0106 	adc.w	r1, sl, r6
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	461d      	mov	r5, r3
 8002d88:	f04f 0600 	mov.w	r6, #0
 8002d8c:	196b      	adds	r3, r5, r5
 8002d8e:	eb46 0406 	adc.w	r4, r6, r6
 8002d92:	461a      	mov	r2, r3
 8002d94:	4623      	mov	r3, r4
 8002d96:	f7fd fa7b 	bl	8000290 <__aeabi_uldivmod>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	460c      	mov	r4, r1
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <UART_SetConfig+0x384>)
 8002da2:	fba3 1302 	umull	r1, r3, r3, r2
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2164      	movs	r1, #100	; 0x64
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	3332      	adds	r3, #50	; 0x32
 8002db4:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <UART_SetConfig+0x384>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dc2:	4498      	add	r8, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	f04f 0600 	mov.w	r6, #0
 8002dcc:	46a9      	mov	r9, r5
 8002dce:	46b2      	mov	sl, r6
 8002dd0:	eb19 0309 	adds.w	r3, r9, r9
 8002dd4:	eb4a 040a 	adc.w	r4, sl, sl
 8002dd8:	4699      	mov	r9, r3
 8002dda:	46a2      	mov	sl, r4
 8002ddc:	eb19 0905 	adds.w	r9, r9, r5
 8002de0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002df4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002df8:	4689      	mov	r9, r1
 8002dfa:	4692      	mov	sl, r2
 8002dfc:	eb19 0005 	adds.w	r0, r9, r5
 8002e00:	eb4a 0106 	adc.w	r1, sl, r6
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	461d      	mov	r5, r3
 8002e0a:	f04f 0600 	mov.w	r6, #0
 8002e0e:	196b      	adds	r3, r5, r5
 8002e10:	eb46 0406 	adc.w	r4, r6, r6
 8002e14:	461a      	mov	r2, r3
 8002e16:	4623      	mov	r3, r4
 8002e18:	f7fd fa3a 	bl	8000290 <__aeabi_uldivmod>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <UART_SetConfig+0x384>)
 8002e24:	fba3 1302 	umull	r1, r3, r3, r2
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	2164      	movs	r1, #100	; 0x64
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	3332      	adds	r3, #50	; 0x32
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <UART_SetConfig+0x384>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4442      	add	r2, r8
 8002e48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002e4a:	e1b2      	b.n	80031b2 <UART_SetConfig+0x6e2>
 8002e4c:	40011000 	.word	0x40011000
 8002e50:	40011400 	.word	0x40011400
 8002e54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4ad7      	ldr	r2, [pc, #860]	; (80031bc <UART_SetConfig+0x6ec>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d005      	beq.n	8002e6e <UART_SetConfig+0x39e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4ad6      	ldr	r2, [pc, #856]	; (80031c0 <UART_SetConfig+0x6f0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f040 80d1 	bne.w	8003010 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e6e:	f7ff f9cd 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8002e72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	469a      	mov	sl, r3
 8002e78:	f04f 0b00 	mov.w	fp, #0
 8002e7c:	46d0      	mov	r8, sl
 8002e7e:	46d9      	mov	r9, fp
 8002e80:	eb18 0308 	adds.w	r3, r8, r8
 8002e84:	eb49 0409 	adc.w	r4, r9, r9
 8002e88:	4698      	mov	r8, r3
 8002e8a:	46a1      	mov	r9, r4
 8002e8c:	eb18 080a 	adds.w	r8, r8, sl
 8002e90:	eb49 090b 	adc.w	r9, r9, fp
 8002e94:	f04f 0100 	mov.w	r1, #0
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ea0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ea4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ea8:	4688      	mov	r8, r1
 8002eaa:	4691      	mov	r9, r2
 8002eac:	eb1a 0508 	adds.w	r5, sl, r8
 8002eb0:	eb4b 0609 	adc.w	r6, fp, r9
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	f04f 0400 	mov.w	r4, #0
 8002ec6:	0094      	lsls	r4, r2, #2
 8002ec8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ecc:	008b      	lsls	r3, r1, #2
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	4631      	mov	r1, r6
 8002ed6:	f7fd f9db 	bl	8000290 <__aeabi_uldivmod>
 8002eda:	4603      	mov	r3, r0
 8002edc:	460c      	mov	r4, r1
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4bb8      	ldr	r3, [pc, #736]	; (80031c4 <UART_SetConfig+0x6f4>)
 8002ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	469b      	mov	fp, r3
 8002ef0:	f04f 0c00 	mov.w	ip, #0
 8002ef4:	46d9      	mov	r9, fp
 8002ef6:	46e2      	mov	sl, ip
 8002ef8:	eb19 0309 	adds.w	r3, r9, r9
 8002efc:	eb4a 040a 	adc.w	r4, sl, sl
 8002f00:	4699      	mov	r9, r3
 8002f02:	46a2      	mov	sl, r4
 8002f04:	eb19 090b 	adds.w	r9, r9, fp
 8002f08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f20:	4689      	mov	r9, r1
 8002f22:	4692      	mov	sl, r2
 8002f24:	eb1b 0509 	adds.w	r5, fp, r9
 8002f28:	eb4c 060a 	adc.w	r6, ip, sl
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	f04f 0400 	mov.w	r4, #0
 8002f3e:	0094      	lsls	r4, r2, #2
 8002f40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f44:	008b      	lsls	r3, r1, #2
 8002f46:	461a      	mov	r2, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	4631      	mov	r1, r6
 8002f4e:	f7fd f99f 	bl	8000290 <__aeabi_uldivmod>
 8002f52:	4603      	mov	r3, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b9a      	ldr	r3, [pc, #616]	; (80031c4 <UART_SetConfig+0x6f4>)
 8002f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2164      	movs	r1, #100	; 0x64
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	3332      	adds	r3, #50	; 0x32
 8002f6c:	4a95      	ldr	r2, [pc, #596]	; (80031c4 <UART_SetConfig+0x6f4>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f78:	4498      	add	r8, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	469b      	mov	fp, r3
 8002f7e:	f04f 0c00 	mov.w	ip, #0
 8002f82:	46d9      	mov	r9, fp
 8002f84:	46e2      	mov	sl, ip
 8002f86:	eb19 0309 	adds.w	r3, r9, r9
 8002f8a:	eb4a 040a 	adc.w	r4, sl, sl
 8002f8e:	4699      	mov	r9, r3
 8002f90:	46a2      	mov	sl, r4
 8002f92:	eb19 090b 	adds.w	r9, r9, fp
 8002f96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002faa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fae:	4689      	mov	r9, r1
 8002fb0:	4692      	mov	sl, r2
 8002fb2:	eb1b 0509 	adds.w	r5, fp, r9
 8002fb6:	eb4c 060a 	adc.w	r6, ip, sl
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	f04f 0400 	mov.w	r4, #0
 8002fcc:	0094      	lsls	r4, r2, #2
 8002fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fd2:	008b      	lsls	r3, r1, #2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	4628      	mov	r0, r5
 8002fda:	4631      	mov	r1, r6
 8002fdc:	f7fd f958 	bl	8000290 <__aeabi_uldivmod>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b77      	ldr	r3, [pc, #476]	; (80031c4 <UART_SetConfig+0x6f4>)
 8002fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2164      	movs	r1, #100	; 0x64
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a72      	ldr	r2, [pc, #456]	; (80031c4 <UART_SetConfig+0x6f4>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4442      	add	r2, r8
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	e0d0      	b.n	80031b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7ff f8e8 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8003014:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	469a      	mov	sl, r3
 800301a:	f04f 0b00 	mov.w	fp, #0
 800301e:	46d0      	mov	r8, sl
 8003020:	46d9      	mov	r9, fp
 8003022:	eb18 0308 	adds.w	r3, r8, r8
 8003026:	eb49 0409 	adc.w	r4, r9, r9
 800302a:	4698      	mov	r8, r3
 800302c:	46a1      	mov	r9, r4
 800302e:	eb18 080a 	adds.w	r8, r8, sl
 8003032:	eb49 090b 	adc.w	r9, r9, fp
 8003036:	f04f 0100 	mov.w	r1, #0
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003042:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003046:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800304a:	4688      	mov	r8, r1
 800304c:	4691      	mov	r9, r2
 800304e:	eb1a 0508 	adds.w	r5, sl, r8
 8003052:	eb4b 0609 	adc.w	r6, fp, r9
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4619      	mov	r1, r3
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	f04f 0400 	mov.w	r4, #0
 8003068:	0094      	lsls	r4, r2, #2
 800306a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800306e:	008b      	lsls	r3, r1, #2
 8003070:	461a      	mov	r2, r3
 8003072:	4623      	mov	r3, r4
 8003074:	4628      	mov	r0, r5
 8003076:	4631      	mov	r1, r6
 8003078:	f7fd f90a 	bl	8000290 <__aeabi_uldivmod>
 800307c:	4603      	mov	r3, r0
 800307e:	460c      	mov	r4, r1
 8003080:	461a      	mov	r2, r3
 8003082:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <UART_SetConfig+0x6f4>)
 8003084:	fba3 2302 	umull	r2, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	469b      	mov	fp, r3
 8003092:	f04f 0c00 	mov.w	ip, #0
 8003096:	46d9      	mov	r9, fp
 8003098:	46e2      	mov	sl, ip
 800309a:	eb19 0309 	adds.w	r3, r9, r9
 800309e:	eb4a 040a 	adc.w	r4, sl, sl
 80030a2:	4699      	mov	r9, r3
 80030a4:	46a2      	mov	sl, r4
 80030a6:	eb19 090b 	adds.w	r9, r9, fp
 80030aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030c2:	4689      	mov	r9, r1
 80030c4:	4692      	mov	sl, r2
 80030c6:	eb1b 0509 	adds.w	r5, fp, r9
 80030ca:	eb4c 060a 	adc.w	r6, ip, sl
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4619      	mov	r1, r3
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f04f 0400 	mov.w	r4, #0
 80030e0:	0094      	lsls	r4, r2, #2
 80030e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030e6:	008b      	lsls	r3, r1, #2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4623      	mov	r3, r4
 80030ec:	4628      	mov	r0, r5
 80030ee:	4631      	mov	r1, r6
 80030f0:	f7fd f8ce 	bl	8000290 <__aeabi_uldivmod>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <UART_SetConfig+0x6f4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <UART_SetConfig+0x6f4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800311a:	4498      	add	r8, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	469b      	mov	fp, r3
 8003120:	f04f 0c00 	mov.w	ip, #0
 8003124:	46d9      	mov	r9, fp
 8003126:	46e2      	mov	sl, ip
 8003128:	eb19 0309 	adds.w	r3, r9, r9
 800312c:	eb4a 040a 	adc.w	r4, sl, sl
 8003130:	4699      	mov	r9, r3
 8003132:	46a2      	mov	sl, r4
 8003134:	eb19 090b 	adds.w	r9, r9, fp
 8003138:	eb4a 0a0c 	adc.w	sl, sl, ip
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003148:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800314c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003150:	4689      	mov	r9, r1
 8003152:	4692      	mov	sl, r2
 8003154:	eb1b 0509 	adds.w	r5, fp, r9
 8003158:	eb4c 060a 	adc.w	r6, ip, sl
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4619      	mov	r1, r3
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	f04f 0400 	mov.w	r4, #0
 800316e:	0094      	lsls	r4, r2, #2
 8003170:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003174:	008b      	lsls	r3, r1, #2
 8003176:	461a      	mov	r2, r3
 8003178:	4623      	mov	r3, r4
 800317a:	4628      	mov	r0, r5
 800317c:	4631      	mov	r1, r6
 800317e:	f7fd f887 	bl	8000290 <__aeabi_uldivmod>
 8003182:	4603      	mov	r3, r0
 8003184:	460c      	mov	r4, r1
 8003186:	461a      	mov	r2, r3
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <UART_SetConfig+0x6f4>)
 800318a:	fba3 1302 	umull	r1, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2164      	movs	r1, #100	; 0x64
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	3332      	adds	r3, #50	; 0x32
 800319c:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <UART_SetConfig+0x6f4>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4442      	add	r2, r8
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	e7ff      	b.n	80031b2 <UART_SetConfig+0x6e2>
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031bc:	40011000 	.word	0x40011000
 80031c0:	40011400 	.word	0x40011400
 80031c4:	51eb851f 	.word	0x51eb851f

080031c8 <__errno>:
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <__errno+0x8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000010 	.word	0x20000010

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4e0d      	ldr	r6, [pc, #52]	; (800320c <__libc_init_array+0x38>)
 80031d8:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031da:	1ba4      	subs	r4, r4, r6
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	2500      	movs	r5, #0
 80031e0:	42a5      	cmp	r5, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	4e0b      	ldr	r6, [pc, #44]	; (8003214 <__libc_init_array+0x40>)
 80031e6:	4c0c      	ldr	r4, [pc, #48]	; (8003218 <__libc_init_array+0x44>)
 80031e8:	f000 ff04 	bl	8003ff4 <_init>
 80031ec:	1ba4      	subs	r4, r4, r6
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	2500      	movs	r5, #0
 80031f2:	42a5      	cmp	r5, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031fc:	4798      	blx	r3
 80031fe:	3501      	adds	r5, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003206:	4798      	blx	r3
 8003208:	3501      	adds	r5, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	0800413c 	.word	0x0800413c
 8003210:	0800413c 	.word	0x0800413c
 8003214:	0800413c 	.word	0x0800413c
 8003218:	08004140 	.word	0x08004140

0800321c <memset>:
 800321c:	4402      	add	r2, r0
 800321e:	4603      	mov	r3, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <iprintf>:
 800322c:	b40f      	push	{r0, r1, r2, r3}
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <iprintf+0x2c>)
 8003230:	b513      	push	{r0, r1, r4, lr}
 8003232:	681c      	ldr	r4, [r3, #0]
 8003234:	b124      	cbz	r4, 8003240 <iprintf+0x14>
 8003236:	69a3      	ldr	r3, [r4, #24]
 8003238:	b913      	cbnz	r3, 8003240 <iprintf+0x14>
 800323a:	4620      	mov	r0, r4
 800323c:	f000 f84e 	bl	80032dc <__sinit>
 8003240:	ab05      	add	r3, sp, #20
 8003242:	9a04      	ldr	r2, [sp, #16]
 8003244:	68a1      	ldr	r1, [r4, #8]
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	4620      	mov	r0, r4
 800324a:	f000 f955 	bl	80034f8 <_vfiprintf_r>
 800324e:	b002      	add	sp, #8
 8003250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003254:	b004      	add	sp, #16
 8003256:	4770      	bx	lr
 8003258:	20000010 	.word	0x20000010

0800325c <std>:
 800325c:	2300      	movs	r3, #0
 800325e:	b510      	push	{r4, lr}
 8003260:	4604      	mov	r4, r0
 8003262:	e9c0 3300 	strd	r3, r3, [r0]
 8003266:	6083      	str	r3, [r0, #8]
 8003268:	8181      	strh	r1, [r0, #12]
 800326a:	6643      	str	r3, [r0, #100]	; 0x64
 800326c:	81c2      	strh	r2, [r0, #14]
 800326e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003272:	6183      	str	r3, [r0, #24]
 8003274:	4619      	mov	r1, r3
 8003276:	2208      	movs	r2, #8
 8003278:	305c      	adds	r0, #92	; 0x5c
 800327a:	f7ff ffcf 	bl	800321c <memset>
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <std+0x38>)
 8003280:	6263      	str	r3, [r4, #36]	; 0x24
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <std+0x3c>)
 8003284:	62a3      	str	r3, [r4, #40]	; 0x28
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <std+0x40>)
 8003288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <std+0x44>)
 800328c:	6224      	str	r4, [r4, #32]
 800328e:	6323      	str	r3, [r4, #48]	; 0x30
 8003290:	bd10      	pop	{r4, pc}
 8003292:	bf00      	nop
 8003294:	08003a55 	.word	0x08003a55
 8003298:	08003a77 	.word	0x08003a77
 800329c:	08003aaf 	.word	0x08003aaf
 80032a0:	08003ad3 	.word	0x08003ad3

080032a4 <_cleanup_r>:
 80032a4:	4901      	ldr	r1, [pc, #4]	; (80032ac <_cleanup_r+0x8>)
 80032a6:	f000 b885 	b.w	80033b4 <_fwalk_reent>
 80032aa:	bf00      	nop
 80032ac:	08003dad 	.word	0x08003dad

080032b0 <__sfmoreglue>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	1e4a      	subs	r2, r1, #1
 80032b4:	2568      	movs	r5, #104	; 0x68
 80032b6:	4355      	muls	r5, r2
 80032b8:	460e      	mov	r6, r1
 80032ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032be:	f000 f897 	bl	80033f0 <_malloc_r>
 80032c2:	4604      	mov	r4, r0
 80032c4:	b140      	cbz	r0, 80032d8 <__sfmoreglue+0x28>
 80032c6:	2100      	movs	r1, #0
 80032c8:	e9c0 1600 	strd	r1, r6, [r0]
 80032cc:	300c      	adds	r0, #12
 80032ce:	60a0      	str	r0, [r4, #8]
 80032d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032d4:	f7ff ffa2 	bl	800321c <memset>
 80032d8:	4620      	mov	r0, r4
 80032da:	bd70      	pop	{r4, r5, r6, pc}

080032dc <__sinit>:
 80032dc:	6983      	ldr	r3, [r0, #24]
 80032de:	b510      	push	{r4, lr}
 80032e0:	4604      	mov	r4, r0
 80032e2:	bb33      	cbnz	r3, 8003332 <__sinit+0x56>
 80032e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80032e8:	6503      	str	r3, [r0, #80]	; 0x50
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <__sinit+0x58>)
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <__sinit+0x5c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6282      	str	r2, [r0, #40]	; 0x28
 80032f2:	4298      	cmp	r0, r3
 80032f4:	bf04      	itt	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	6183      	streq	r3, [r0, #24]
 80032fa:	f000 f81f 	bl	800333c <__sfp>
 80032fe:	6060      	str	r0, [r4, #4]
 8003300:	4620      	mov	r0, r4
 8003302:	f000 f81b 	bl	800333c <__sfp>
 8003306:	60a0      	str	r0, [r4, #8]
 8003308:	4620      	mov	r0, r4
 800330a:	f000 f817 	bl	800333c <__sfp>
 800330e:	2200      	movs	r2, #0
 8003310:	60e0      	str	r0, [r4, #12]
 8003312:	2104      	movs	r1, #4
 8003314:	6860      	ldr	r0, [r4, #4]
 8003316:	f7ff ffa1 	bl	800325c <std>
 800331a:	2201      	movs	r2, #1
 800331c:	2109      	movs	r1, #9
 800331e:	68a0      	ldr	r0, [r4, #8]
 8003320:	f7ff ff9c 	bl	800325c <std>
 8003324:	2202      	movs	r2, #2
 8003326:	2112      	movs	r1, #18
 8003328:	68e0      	ldr	r0, [r4, #12]
 800332a:	f7ff ff97 	bl	800325c <std>
 800332e:	2301      	movs	r3, #1
 8003330:	61a3      	str	r3, [r4, #24]
 8003332:	bd10      	pop	{r4, pc}
 8003334:	0800409c 	.word	0x0800409c
 8003338:	080032a5 	.word	0x080032a5

0800333c <__sfp>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <__sfp+0x70>)
 8003340:	681e      	ldr	r6, [r3, #0]
 8003342:	69b3      	ldr	r3, [r6, #24]
 8003344:	4607      	mov	r7, r0
 8003346:	b913      	cbnz	r3, 800334e <__sfp+0x12>
 8003348:	4630      	mov	r0, r6
 800334a:	f7ff ffc7 	bl	80032dc <__sinit>
 800334e:	3648      	adds	r6, #72	; 0x48
 8003350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003354:	3b01      	subs	r3, #1
 8003356:	d503      	bpl.n	8003360 <__sfp+0x24>
 8003358:	6833      	ldr	r3, [r6, #0]
 800335a:	b133      	cbz	r3, 800336a <__sfp+0x2e>
 800335c:	6836      	ldr	r6, [r6, #0]
 800335e:	e7f7      	b.n	8003350 <__sfp+0x14>
 8003360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003364:	b16d      	cbz	r5, 8003382 <__sfp+0x46>
 8003366:	3468      	adds	r4, #104	; 0x68
 8003368:	e7f4      	b.n	8003354 <__sfp+0x18>
 800336a:	2104      	movs	r1, #4
 800336c:	4638      	mov	r0, r7
 800336e:	f7ff ff9f 	bl	80032b0 <__sfmoreglue>
 8003372:	6030      	str	r0, [r6, #0]
 8003374:	2800      	cmp	r0, #0
 8003376:	d1f1      	bne.n	800335c <__sfp+0x20>
 8003378:	230c      	movs	r3, #12
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4604      	mov	r4, r0
 800337e:	4620      	mov	r0, r4
 8003380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <__sfp+0x74>)
 8003384:	6665      	str	r5, [r4, #100]	; 0x64
 8003386:	e9c4 5500 	strd	r5, r5, [r4]
 800338a:	60a5      	str	r5, [r4, #8]
 800338c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003390:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003394:	2208      	movs	r2, #8
 8003396:	4629      	mov	r1, r5
 8003398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800339c:	f7ff ff3e 	bl	800321c <memset>
 80033a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033a8:	e7e9      	b.n	800337e <__sfp+0x42>
 80033aa:	bf00      	nop
 80033ac:	0800409c 	.word	0x0800409c
 80033b0:	ffff0001 	.word	0xffff0001

080033b4 <_fwalk_reent>:
 80033b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033b8:	4680      	mov	r8, r0
 80033ba:	4689      	mov	r9, r1
 80033bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033c0:	2600      	movs	r6, #0
 80033c2:	b914      	cbnz	r4, 80033ca <_fwalk_reent+0x16>
 80033c4:	4630      	mov	r0, r6
 80033c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80033ce:	3f01      	subs	r7, #1
 80033d0:	d501      	bpl.n	80033d6 <_fwalk_reent+0x22>
 80033d2:	6824      	ldr	r4, [r4, #0]
 80033d4:	e7f5      	b.n	80033c2 <_fwalk_reent+0xe>
 80033d6:	89ab      	ldrh	r3, [r5, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d907      	bls.n	80033ec <_fwalk_reent+0x38>
 80033dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033e0:	3301      	adds	r3, #1
 80033e2:	d003      	beq.n	80033ec <_fwalk_reent+0x38>
 80033e4:	4629      	mov	r1, r5
 80033e6:	4640      	mov	r0, r8
 80033e8:	47c8      	blx	r9
 80033ea:	4306      	orrs	r6, r0
 80033ec:	3568      	adds	r5, #104	; 0x68
 80033ee:	e7ee      	b.n	80033ce <_fwalk_reent+0x1a>

080033f0 <_malloc_r>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	1ccd      	adds	r5, r1, #3
 80033f4:	f025 0503 	bic.w	r5, r5, #3
 80033f8:	3508      	adds	r5, #8
 80033fa:	2d0c      	cmp	r5, #12
 80033fc:	bf38      	it	cc
 80033fe:	250c      	movcc	r5, #12
 8003400:	2d00      	cmp	r5, #0
 8003402:	4606      	mov	r6, r0
 8003404:	db01      	blt.n	800340a <_malloc_r+0x1a>
 8003406:	42a9      	cmp	r1, r5
 8003408:	d903      	bls.n	8003412 <_malloc_r+0x22>
 800340a:	230c      	movs	r3, #12
 800340c:	6033      	str	r3, [r6, #0]
 800340e:	2000      	movs	r0, #0
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	f000 fd6b 	bl	8003eec <__malloc_lock>
 8003416:	4a21      	ldr	r2, [pc, #132]	; (800349c <_malloc_r+0xac>)
 8003418:	6814      	ldr	r4, [r2, #0]
 800341a:	4621      	mov	r1, r4
 800341c:	b991      	cbnz	r1, 8003444 <_malloc_r+0x54>
 800341e:	4c20      	ldr	r4, [pc, #128]	; (80034a0 <_malloc_r+0xb0>)
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	b91b      	cbnz	r3, 800342c <_malloc_r+0x3c>
 8003424:	4630      	mov	r0, r6
 8003426:	f000 fb05 	bl	8003a34 <_sbrk_r>
 800342a:	6020      	str	r0, [r4, #0]
 800342c:	4629      	mov	r1, r5
 800342e:	4630      	mov	r0, r6
 8003430:	f000 fb00 	bl	8003a34 <_sbrk_r>
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	d124      	bne.n	8003482 <_malloc_r+0x92>
 8003438:	230c      	movs	r3, #12
 800343a:	6033      	str	r3, [r6, #0]
 800343c:	4630      	mov	r0, r6
 800343e:	f000 fd56 	bl	8003eee <__malloc_unlock>
 8003442:	e7e4      	b.n	800340e <_malloc_r+0x1e>
 8003444:	680b      	ldr	r3, [r1, #0]
 8003446:	1b5b      	subs	r3, r3, r5
 8003448:	d418      	bmi.n	800347c <_malloc_r+0x8c>
 800344a:	2b0b      	cmp	r3, #11
 800344c:	d90f      	bls.n	800346e <_malloc_r+0x7e>
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	50cd      	str	r5, [r1, r3]
 8003452:	18cc      	adds	r4, r1, r3
 8003454:	4630      	mov	r0, r6
 8003456:	f000 fd4a 	bl	8003eee <__malloc_unlock>
 800345a:	f104 000b 	add.w	r0, r4, #11
 800345e:	1d23      	adds	r3, r4, #4
 8003460:	f020 0007 	bic.w	r0, r0, #7
 8003464:	1ac3      	subs	r3, r0, r3
 8003466:	d0d3      	beq.n	8003410 <_malloc_r+0x20>
 8003468:	425a      	negs	r2, r3
 800346a:	50e2      	str	r2, [r4, r3]
 800346c:	e7d0      	b.n	8003410 <_malloc_r+0x20>
 800346e:	428c      	cmp	r4, r1
 8003470:	684b      	ldr	r3, [r1, #4]
 8003472:	bf16      	itet	ne
 8003474:	6063      	strne	r3, [r4, #4]
 8003476:	6013      	streq	r3, [r2, #0]
 8003478:	460c      	movne	r4, r1
 800347a:	e7eb      	b.n	8003454 <_malloc_r+0x64>
 800347c:	460c      	mov	r4, r1
 800347e:	6849      	ldr	r1, [r1, #4]
 8003480:	e7cc      	b.n	800341c <_malloc_r+0x2c>
 8003482:	1cc4      	adds	r4, r0, #3
 8003484:	f024 0403 	bic.w	r4, r4, #3
 8003488:	42a0      	cmp	r0, r4
 800348a:	d005      	beq.n	8003498 <_malloc_r+0xa8>
 800348c:	1a21      	subs	r1, r4, r0
 800348e:	4630      	mov	r0, r6
 8003490:	f000 fad0 	bl	8003a34 <_sbrk_r>
 8003494:	3001      	adds	r0, #1
 8003496:	d0cf      	beq.n	8003438 <_malloc_r+0x48>
 8003498:	6025      	str	r5, [r4, #0]
 800349a:	e7db      	b.n	8003454 <_malloc_r+0x64>
 800349c:	2000009c 	.word	0x2000009c
 80034a0:	200000a0 	.word	0x200000a0

080034a4 <__sfputc_r>:
 80034a4:	6893      	ldr	r3, [r2, #8]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	b410      	push	{r4}
 80034ac:	6093      	str	r3, [r2, #8]
 80034ae:	da08      	bge.n	80034c2 <__sfputc_r+0x1e>
 80034b0:	6994      	ldr	r4, [r2, #24]
 80034b2:	42a3      	cmp	r3, r4
 80034b4:	db01      	blt.n	80034ba <__sfputc_r+0x16>
 80034b6:	290a      	cmp	r1, #10
 80034b8:	d103      	bne.n	80034c2 <__sfputc_r+0x1e>
 80034ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034be:	f000 bb0d 	b.w	8003adc <__swbuf_r>
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	1c58      	adds	r0, r3, #1
 80034c6:	6010      	str	r0, [r2, #0]
 80034c8:	7019      	strb	r1, [r3, #0]
 80034ca:	4608      	mov	r0, r1
 80034cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <__sfputs_r>:
 80034d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d4:	4606      	mov	r6, r0
 80034d6:	460f      	mov	r7, r1
 80034d8:	4614      	mov	r4, r2
 80034da:	18d5      	adds	r5, r2, r3
 80034dc:	42ac      	cmp	r4, r5
 80034de:	d101      	bne.n	80034e4 <__sfputs_r+0x12>
 80034e0:	2000      	movs	r0, #0
 80034e2:	e007      	b.n	80034f4 <__sfputs_r+0x22>
 80034e4:	463a      	mov	r2, r7
 80034e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ea:	4630      	mov	r0, r6
 80034ec:	f7ff ffda 	bl	80034a4 <__sfputc_r>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d1f3      	bne.n	80034dc <__sfputs_r+0xa>
 80034f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034f8 <_vfiprintf_r>:
 80034f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fc:	460c      	mov	r4, r1
 80034fe:	b09d      	sub	sp, #116	; 0x74
 8003500:	4617      	mov	r7, r2
 8003502:	461d      	mov	r5, r3
 8003504:	4606      	mov	r6, r0
 8003506:	b118      	cbz	r0, 8003510 <_vfiprintf_r+0x18>
 8003508:	6983      	ldr	r3, [r0, #24]
 800350a:	b90b      	cbnz	r3, 8003510 <_vfiprintf_r+0x18>
 800350c:	f7ff fee6 	bl	80032dc <__sinit>
 8003510:	4b7c      	ldr	r3, [pc, #496]	; (8003704 <_vfiprintf_r+0x20c>)
 8003512:	429c      	cmp	r4, r3
 8003514:	d158      	bne.n	80035c8 <_vfiprintf_r+0xd0>
 8003516:	6874      	ldr	r4, [r6, #4]
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	0718      	lsls	r0, r3, #28
 800351c:	d55e      	bpl.n	80035dc <_vfiprintf_r+0xe4>
 800351e:	6923      	ldr	r3, [r4, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d05b      	beq.n	80035dc <_vfiprintf_r+0xe4>
 8003524:	2300      	movs	r3, #0
 8003526:	9309      	str	r3, [sp, #36]	; 0x24
 8003528:	2320      	movs	r3, #32
 800352a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800352e:	2330      	movs	r3, #48	; 0x30
 8003530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003534:	9503      	str	r5, [sp, #12]
 8003536:	f04f 0b01 	mov.w	fp, #1
 800353a:	46b8      	mov	r8, r7
 800353c:	4645      	mov	r5, r8
 800353e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003542:	b10b      	cbz	r3, 8003548 <_vfiprintf_r+0x50>
 8003544:	2b25      	cmp	r3, #37	; 0x25
 8003546:	d154      	bne.n	80035f2 <_vfiprintf_r+0xfa>
 8003548:	ebb8 0a07 	subs.w	sl, r8, r7
 800354c:	d00b      	beq.n	8003566 <_vfiprintf_r+0x6e>
 800354e:	4653      	mov	r3, sl
 8003550:	463a      	mov	r2, r7
 8003552:	4621      	mov	r1, r4
 8003554:	4630      	mov	r0, r6
 8003556:	f7ff ffbc 	bl	80034d2 <__sfputs_r>
 800355a:	3001      	adds	r0, #1
 800355c:	f000 80c2 	beq.w	80036e4 <_vfiprintf_r+0x1ec>
 8003560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003562:	4453      	add	r3, sl
 8003564:	9309      	str	r3, [sp, #36]	; 0x24
 8003566:	f898 3000 	ldrb.w	r3, [r8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80ba 	beq.w	80036e4 <_vfiprintf_r+0x1ec>
 8003570:	2300      	movs	r3, #0
 8003572:	f04f 32ff 	mov.w	r2, #4294967295
 8003576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800357a:	9304      	str	r3, [sp, #16]
 800357c:	9307      	str	r3, [sp, #28]
 800357e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003582:	931a      	str	r3, [sp, #104]	; 0x68
 8003584:	46a8      	mov	r8, r5
 8003586:	2205      	movs	r2, #5
 8003588:	f818 1b01 	ldrb.w	r1, [r8], #1
 800358c:	485e      	ldr	r0, [pc, #376]	; (8003708 <_vfiprintf_r+0x210>)
 800358e:	f7fc fe2f 	bl	80001f0 <memchr>
 8003592:	9b04      	ldr	r3, [sp, #16]
 8003594:	bb78      	cbnz	r0, 80035f6 <_vfiprintf_r+0xfe>
 8003596:	06d9      	lsls	r1, r3, #27
 8003598:	bf44      	itt	mi
 800359a:	2220      	movmi	r2, #32
 800359c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035a0:	071a      	lsls	r2, r3, #28
 80035a2:	bf44      	itt	mi
 80035a4:	222b      	movmi	r2, #43	; 0x2b
 80035a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035aa:	782a      	ldrb	r2, [r5, #0]
 80035ac:	2a2a      	cmp	r2, #42	; 0x2a
 80035ae:	d02a      	beq.n	8003606 <_vfiprintf_r+0x10e>
 80035b0:	9a07      	ldr	r2, [sp, #28]
 80035b2:	46a8      	mov	r8, r5
 80035b4:	2000      	movs	r0, #0
 80035b6:	250a      	movs	r5, #10
 80035b8:	4641      	mov	r1, r8
 80035ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035be:	3b30      	subs	r3, #48	; 0x30
 80035c0:	2b09      	cmp	r3, #9
 80035c2:	d969      	bls.n	8003698 <_vfiprintf_r+0x1a0>
 80035c4:	b360      	cbz	r0, 8003620 <_vfiprintf_r+0x128>
 80035c6:	e024      	b.n	8003612 <_vfiprintf_r+0x11a>
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <_vfiprintf_r+0x214>)
 80035ca:	429c      	cmp	r4, r3
 80035cc:	d101      	bne.n	80035d2 <_vfiprintf_r+0xda>
 80035ce:	68b4      	ldr	r4, [r6, #8]
 80035d0:	e7a2      	b.n	8003518 <_vfiprintf_r+0x20>
 80035d2:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <_vfiprintf_r+0x218>)
 80035d4:	429c      	cmp	r4, r3
 80035d6:	bf08      	it	eq
 80035d8:	68f4      	ldreq	r4, [r6, #12]
 80035da:	e79d      	b.n	8003518 <_vfiprintf_r+0x20>
 80035dc:	4621      	mov	r1, r4
 80035de:	4630      	mov	r0, r6
 80035e0:	f000 fae0 	bl	8003ba4 <__swsetup_r>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d09d      	beq.n	8003524 <_vfiprintf_r+0x2c>
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	b01d      	add	sp, #116	; 0x74
 80035ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f2:	46a8      	mov	r8, r5
 80035f4:	e7a2      	b.n	800353c <_vfiprintf_r+0x44>
 80035f6:	4a44      	ldr	r2, [pc, #272]	; (8003708 <_vfiprintf_r+0x210>)
 80035f8:	1a80      	subs	r0, r0, r2
 80035fa:	fa0b f000 	lsl.w	r0, fp, r0
 80035fe:	4318      	orrs	r0, r3
 8003600:	9004      	str	r0, [sp, #16]
 8003602:	4645      	mov	r5, r8
 8003604:	e7be      	b.n	8003584 <_vfiprintf_r+0x8c>
 8003606:	9a03      	ldr	r2, [sp, #12]
 8003608:	1d11      	adds	r1, r2, #4
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	9103      	str	r1, [sp, #12]
 800360e:	2a00      	cmp	r2, #0
 8003610:	db01      	blt.n	8003616 <_vfiprintf_r+0x11e>
 8003612:	9207      	str	r2, [sp, #28]
 8003614:	e004      	b.n	8003620 <_vfiprintf_r+0x128>
 8003616:	4252      	negs	r2, r2
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	9207      	str	r2, [sp, #28]
 800361e:	9304      	str	r3, [sp, #16]
 8003620:	f898 3000 	ldrb.w	r3, [r8]
 8003624:	2b2e      	cmp	r3, #46	; 0x2e
 8003626:	d10e      	bne.n	8003646 <_vfiprintf_r+0x14e>
 8003628:	f898 3001 	ldrb.w	r3, [r8, #1]
 800362c:	2b2a      	cmp	r3, #42	; 0x2a
 800362e:	d138      	bne.n	80036a2 <_vfiprintf_r+0x1aa>
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	1d1a      	adds	r2, r3, #4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	9203      	str	r2, [sp, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	bfb8      	it	lt
 800363c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003640:	f108 0802 	add.w	r8, r8, #2
 8003644:	9305      	str	r3, [sp, #20]
 8003646:	4d33      	ldr	r5, [pc, #204]	; (8003714 <_vfiprintf_r+0x21c>)
 8003648:	f898 1000 	ldrb.w	r1, [r8]
 800364c:	2203      	movs	r2, #3
 800364e:	4628      	mov	r0, r5
 8003650:	f7fc fdce 	bl	80001f0 <memchr>
 8003654:	b140      	cbz	r0, 8003668 <_vfiprintf_r+0x170>
 8003656:	2340      	movs	r3, #64	; 0x40
 8003658:	1b40      	subs	r0, r0, r5
 800365a:	fa03 f000 	lsl.w	r0, r3, r0
 800365e:	9b04      	ldr	r3, [sp, #16]
 8003660:	4303      	orrs	r3, r0
 8003662:	f108 0801 	add.w	r8, r8, #1
 8003666:	9304      	str	r3, [sp, #16]
 8003668:	f898 1000 	ldrb.w	r1, [r8]
 800366c:	482a      	ldr	r0, [pc, #168]	; (8003718 <_vfiprintf_r+0x220>)
 800366e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003672:	2206      	movs	r2, #6
 8003674:	f108 0701 	add.w	r7, r8, #1
 8003678:	f7fc fdba 	bl	80001f0 <memchr>
 800367c:	2800      	cmp	r0, #0
 800367e:	d037      	beq.n	80036f0 <_vfiprintf_r+0x1f8>
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <_vfiprintf_r+0x224>)
 8003682:	bb1b      	cbnz	r3, 80036cc <_vfiprintf_r+0x1d4>
 8003684:	9b03      	ldr	r3, [sp, #12]
 8003686:	3307      	adds	r3, #7
 8003688:	f023 0307 	bic.w	r3, r3, #7
 800368c:	3308      	adds	r3, #8
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003692:	444b      	add	r3, r9
 8003694:	9309      	str	r3, [sp, #36]	; 0x24
 8003696:	e750      	b.n	800353a <_vfiprintf_r+0x42>
 8003698:	fb05 3202 	mla	r2, r5, r2, r3
 800369c:	2001      	movs	r0, #1
 800369e:	4688      	mov	r8, r1
 80036a0:	e78a      	b.n	80035b8 <_vfiprintf_r+0xc0>
 80036a2:	2300      	movs	r3, #0
 80036a4:	f108 0801 	add.w	r8, r8, #1
 80036a8:	9305      	str	r3, [sp, #20]
 80036aa:	4619      	mov	r1, r3
 80036ac:	250a      	movs	r5, #10
 80036ae:	4640      	mov	r0, r8
 80036b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036b4:	3a30      	subs	r2, #48	; 0x30
 80036b6:	2a09      	cmp	r2, #9
 80036b8:	d903      	bls.n	80036c2 <_vfiprintf_r+0x1ca>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0c3      	beq.n	8003646 <_vfiprintf_r+0x14e>
 80036be:	9105      	str	r1, [sp, #20]
 80036c0:	e7c1      	b.n	8003646 <_vfiprintf_r+0x14e>
 80036c2:	fb05 2101 	mla	r1, r5, r1, r2
 80036c6:	2301      	movs	r3, #1
 80036c8:	4680      	mov	r8, r0
 80036ca:	e7f0      	b.n	80036ae <_vfiprintf_r+0x1b6>
 80036cc:	ab03      	add	r3, sp, #12
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4622      	mov	r2, r4
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <_vfiprintf_r+0x228>)
 80036d4:	a904      	add	r1, sp, #16
 80036d6:	4630      	mov	r0, r6
 80036d8:	f3af 8000 	nop.w
 80036dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036e0:	4681      	mov	r9, r0
 80036e2:	d1d5      	bne.n	8003690 <_vfiprintf_r+0x198>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	065b      	lsls	r3, r3, #25
 80036e8:	f53f af7e 	bmi.w	80035e8 <_vfiprintf_r+0xf0>
 80036ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ee:	e77d      	b.n	80035ec <_vfiprintf_r+0xf4>
 80036f0:	ab03      	add	r3, sp, #12
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4622      	mov	r2, r4
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <_vfiprintf_r+0x228>)
 80036f8:	a904      	add	r1, sp, #16
 80036fa:	4630      	mov	r0, r6
 80036fc:	f000 f888 	bl	8003810 <_printf_i>
 8003700:	e7ec      	b.n	80036dc <_vfiprintf_r+0x1e4>
 8003702:	bf00      	nop
 8003704:	080040c0 	.word	0x080040c0
 8003708:	08004100 	.word	0x08004100
 800370c:	080040e0 	.word	0x080040e0
 8003710:	080040a0 	.word	0x080040a0
 8003714:	08004106 	.word	0x08004106
 8003718:	0800410a 	.word	0x0800410a
 800371c:	00000000 	.word	0x00000000
 8003720:	080034d3 	.word	0x080034d3

08003724 <_printf_common>:
 8003724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003728:	4691      	mov	r9, r2
 800372a:	461f      	mov	r7, r3
 800372c:	688a      	ldr	r2, [r1, #8]
 800372e:	690b      	ldr	r3, [r1, #16]
 8003730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003734:	4293      	cmp	r3, r2
 8003736:	bfb8      	it	lt
 8003738:	4613      	movlt	r3, r2
 800373a:	f8c9 3000 	str.w	r3, [r9]
 800373e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003742:	4606      	mov	r6, r0
 8003744:	460c      	mov	r4, r1
 8003746:	b112      	cbz	r2, 800374e <_printf_common+0x2a>
 8003748:	3301      	adds	r3, #1
 800374a:	f8c9 3000 	str.w	r3, [r9]
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	0699      	lsls	r1, r3, #26
 8003752:	bf42      	ittt	mi
 8003754:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003758:	3302      	addmi	r3, #2
 800375a:	f8c9 3000 	strmi.w	r3, [r9]
 800375e:	6825      	ldr	r5, [r4, #0]
 8003760:	f015 0506 	ands.w	r5, r5, #6
 8003764:	d107      	bne.n	8003776 <_printf_common+0x52>
 8003766:	f104 0a19 	add.w	sl, r4, #25
 800376a:	68e3      	ldr	r3, [r4, #12]
 800376c:	f8d9 2000 	ldr.w	r2, [r9]
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	42ab      	cmp	r3, r5
 8003774:	dc28      	bgt.n	80037c8 <_printf_common+0xa4>
 8003776:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	3300      	adds	r3, #0
 800377e:	bf18      	it	ne
 8003780:	2301      	movne	r3, #1
 8003782:	0692      	lsls	r2, r2, #26
 8003784:	d42d      	bmi.n	80037e2 <_printf_common+0xbe>
 8003786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800378a:	4639      	mov	r1, r7
 800378c:	4630      	mov	r0, r6
 800378e:	47c0      	blx	r8
 8003790:	3001      	adds	r0, #1
 8003792:	d020      	beq.n	80037d6 <_printf_common+0xb2>
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	68e5      	ldr	r5, [r4, #12]
 8003798:	f8d9 2000 	ldr.w	r2, [r9]
 800379c:	f003 0306 	and.w	r3, r3, #6
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	bf08      	it	eq
 80037a4:	1aad      	subeq	r5, r5, r2
 80037a6:	68a3      	ldr	r3, [r4, #8]
 80037a8:	6922      	ldr	r2, [r4, #16]
 80037aa:	bf0c      	ite	eq
 80037ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037b0:	2500      	movne	r5, #0
 80037b2:	4293      	cmp	r3, r2
 80037b4:	bfc4      	itt	gt
 80037b6:	1a9b      	subgt	r3, r3, r2
 80037b8:	18ed      	addgt	r5, r5, r3
 80037ba:	f04f 0900 	mov.w	r9, #0
 80037be:	341a      	adds	r4, #26
 80037c0:	454d      	cmp	r5, r9
 80037c2:	d11a      	bne.n	80037fa <_printf_common+0xd6>
 80037c4:	2000      	movs	r0, #0
 80037c6:	e008      	b.n	80037da <_printf_common+0xb6>
 80037c8:	2301      	movs	r3, #1
 80037ca:	4652      	mov	r2, sl
 80037cc:	4639      	mov	r1, r7
 80037ce:	4630      	mov	r0, r6
 80037d0:	47c0      	blx	r8
 80037d2:	3001      	adds	r0, #1
 80037d4:	d103      	bne.n	80037de <_printf_common+0xba>
 80037d6:	f04f 30ff 	mov.w	r0, #4294967295
 80037da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037de:	3501      	adds	r5, #1
 80037e0:	e7c3      	b.n	800376a <_printf_common+0x46>
 80037e2:	18e1      	adds	r1, r4, r3
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	2030      	movs	r0, #48	; 0x30
 80037e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037ec:	4422      	add	r2, r4
 80037ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037f6:	3302      	adds	r3, #2
 80037f8:	e7c5      	b.n	8003786 <_printf_common+0x62>
 80037fa:	2301      	movs	r3, #1
 80037fc:	4622      	mov	r2, r4
 80037fe:	4639      	mov	r1, r7
 8003800:	4630      	mov	r0, r6
 8003802:	47c0      	blx	r8
 8003804:	3001      	adds	r0, #1
 8003806:	d0e6      	beq.n	80037d6 <_printf_common+0xb2>
 8003808:	f109 0901 	add.w	r9, r9, #1
 800380c:	e7d8      	b.n	80037c0 <_printf_common+0x9c>
	...

08003810 <_printf_i>:
 8003810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003814:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003818:	460c      	mov	r4, r1
 800381a:	7e09      	ldrb	r1, [r1, #24]
 800381c:	b085      	sub	sp, #20
 800381e:	296e      	cmp	r1, #110	; 0x6e
 8003820:	4617      	mov	r7, r2
 8003822:	4606      	mov	r6, r0
 8003824:	4698      	mov	r8, r3
 8003826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003828:	f000 80b3 	beq.w	8003992 <_printf_i+0x182>
 800382c:	d822      	bhi.n	8003874 <_printf_i+0x64>
 800382e:	2963      	cmp	r1, #99	; 0x63
 8003830:	d036      	beq.n	80038a0 <_printf_i+0x90>
 8003832:	d80a      	bhi.n	800384a <_printf_i+0x3a>
 8003834:	2900      	cmp	r1, #0
 8003836:	f000 80b9 	beq.w	80039ac <_printf_i+0x19c>
 800383a:	2958      	cmp	r1, #88	; 0x58
 800383c:	f000 8083 	beq.w	8003946 <_printf_i+0x136>
 8003840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003844:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003848:	e032      	b.n	80038b0 <_printf_i+0xa0>
 800384a:	2964      	cmp	r1, #100	; 0x64
 800384c:	d001      	beq.n	8003852 <_printf_i+0x42>
 800384e:	2969      	cmp	r1, #105	; 0x69
 8003850:	d1f6      	bne.n	8003840 <_printf_i+0x30>
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	0605      	lsls	r5, r0, #24
 8003858:	f103 0104 	add.w	r1, r3, #4
 800385c:	d52a      	bpl.n	80038b4 <_printf_i+0xa4>
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	da03      	bge.n	800386e <_printf_i+0x5e>
 8003866:	222d      	movs	r2, #45	; 0x2d
 8003868:	425b      	negs	r3, r3
 800386a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800386e:	486f      	ldr	r0, [pc, #444]	; (8003a2c <_printf_i+0x21c>)
 8003870:	220a      	movs	r2, #10
 8003872:	e039      	b.n	80038e8 <_printf_i+0xd8>
 8003874:	2973      	cmp	r1, #115	; 0x73
 8003876:	f000 809d 	beq.w	80039b4 <_printf_i+0x1a4>
 800387a:	d808      	bhi.n	800388e <_printf_i+0x7e>
 800387c:	296f      	cmp	r1, #111	; 0x6f
 800387e:	d020      	beq.n	80038c2 <_printf_i+0xb2>
 8003880:	2970      	cmp	r1, #112	; 0x70
 8003882:	d1dd      	bne.n	8003840 <_printf_i+0x30>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	f043 0320 	orr.w	r3, r3, #32
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	e003      	b.n	8003896 <_printf_i+0x86>
 800388e:	2975      	cmp	r1, #117	; 0x75
 8003890:	d017      	beq.n	80038c2 <_printf_i+0xb2>
 8003892:	2978      	cmp	r1, #120	; 0x78
 8003894:	d1d4      	bne.n	8003840 <_printf_i+0x30>
 8003896:	2378      	movs	r3, #120	; 0x78
 8003898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800389c:	4864      	ldr	r0, [pc, #400]	; (8003a30 <_printf_i+0x220>)
 800389e:	e055      	b.n	800394c <_printf_i+0x13c>
 80038a0:	6813      	ldr	r3, [r2, #0]
 80038a2:	1d19      	adds	r1, r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6011      	str	r1, [r2, #0]
 80038a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b0:	2301      	movs	r3, #1
 80038b2:	e08c      	b.n	80039ce <_printf_i+0x1be>
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6011      	str	r1, [r2, #0]
 80038b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038bc:	bf18      	it	ne
 80038be:	b21b      	sxthne	r3, r3
 80038c0:	e7cf      	b.n	8003862 <_printf_i+0x52>
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	6825      	ldr	r5, [r4, #0]
 80038c6:	1d18      	adds	r0, r3, #4
 80038c8:	6010      	str	r0, [r2, #0]
 80038ca:	0628      	lsls	r0, r5, #24
 80038cc:	d501      	bpl.n	80038d2 <_printf_i+0xc2>
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	e002      	b.n	80038d8 <_printf_i+0xc8>
 80038d2:	0668      	lsls	r0, r5, #25
 80038d4:	d5fb      	bpl.n	80038ce <_printf_i+0xbe>
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	4854      	ldr	r0, [pc, #336]	; (8003a2c <_printf_i+0x21c>)
 80038da:	296f      	cmp	r1, #111	; 0x6f
 80038dc:	bf14      	ite	ne
 80038de:	220a      	movne	r2, #10
 80038e0:	2208      	moveq	r2, #8
 80038e2:	2100      	movs	r1, #0
 80038e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038e8:	6865      	ldr	r5, [r4, #4]
 80038ea:	60a5      	str	r5, [r4, #8]
 80038ec:	2d00      	cmp	r5, #0
 80038ee:	f2c0 8095 	blt.w	8003a1c <_printf_i+0x20c>
 80038f2:	6821      	ldr	r1, [r4, #0]
 80038f4:	f021 0104 	bic.w	r1, r1, #4
 80038f8:	6021      	str	r1, [r4, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d13d      	bne.n	800397a <_printf_i+0x16a>
 80038fe:	2d00      	cmp	r5, #0
 8003900:	f040 808e 	bne.w	8003a20 <_printf_i+0x210>
 8003904:	4665      	mov	r5, ip
 8003906:	2a08      	cmp	r2, #8
 8003908:	d10b      	bne.n	8003922 <_printf_i+0x112>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	07db      	lsls	r3, r3, #31
 800390e:	d508      	bpl.n	8003922 <_printf_i+0x112>
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	6862      	ldr	r2, [r4, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	bfde      	ittt	le
 8003918:	2330      	movle	r3, #48	; 0x30
 800391a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800391e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003922:	ebac 0305 	sub.w	r3, ip, r5
 8003926:	6123      	str	r3, [r4, #16]
 8003928:	f8cd 8000 	str.w	r8, [sp]
 800392c:	463b      	mov	r3, r7
 800392e:	aa03      	add	r2, sp, #12
 8003930:	4621      	mov	r1, r4
 8003932:	4630      	mov	r0, r6
 8003934:	f7ff fef6 	bl	8003724 <_printf_common>
 8003938:	3001      	adds	r0, #1
 800393a:	d14d      	bne.n	80039d8 <_printf_i+0x1c8>
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	b005      	add	sp, #20
 8003942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003946:	4839      	ldr	r0, [pc, #228]	; (8003a2c <_printf_i+0x21c>)
 8003948:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	6821      	ldr	r1, [r4, #0]
 8003950:	1d1d      	adds	r5, r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6015      	str	r5, [r2, #0]
 8003956:	060a      	lsls	r2, r1, #24
 8003958:	d50b      	bpl.n	8003972 <_printf_i+0x162>
 800395a:	07ca      	lsls	r2, r1, #31
 800395c:	bf44      	itt	mi
 800395e:	f041 0120 	orrmi.w	r1, r1, #32
 8003962:	6021      	strmi	r1, [r4, #0]
 8003964:	b91b      	cbnz	r3, 800396e <_printf_i+0x15e>
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	f022 0220 	bic.w	r2, r2, #32
 800396c:	6022      	str	r2, [r4, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	e7b7      	b.n	80038e2 <_printf_i+0xd2>
 8003972:	064d      	lsls	r5, r1, #25
 8003974:	bf48      	it	mi
 8003976:	b29b      	uxthmi	r3, r3
 8003978:	e7ef      	b.n	800395a <_printf_i+0x14a>
 800397a:	4665      	mov	r5, ip
 800397c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003980:	fb02 3311 	mls	r3, r2, r1, r3
 8003984:	5cc3      	ldrb	r3, [r0, r3]
 8003986:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800398a:	460b      	mov	r3, r1
 800398c:	2900      	cmp	r1, #0
 800398e:	d1f5      	bne.n	800397c <_printf_i+0x16c>
 8003990:	e7b9      	b.n	8003906 <_printf_i+0xf6>
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	6825      	ldr	r5, [r4, #0]
 8003996:	6961      	ldr	r1, [r4, #20]
 8003998:	1d18      	adds	r0, r3, #4
 800399a:	6010      	str	r0, [r2, #0]
 800399c:	0628      	lsls	r0, r5, #24
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	d501      	bpl.n	80039a6 <_printf_i+0x196>
 80039a2:	6019      	str	r1, [r3, #0]
 80039a4:	e002      	b.n	80039ac <_printf_i+0x19c>
 80039a6:	066a      	lsls	r2, r5, #25
 80039a8:	d5fb      	bpl.n	80039a2 <_printf_i+0x192>
 80039aa:	8019      	strh	r1, [r3, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	6123      	str	r3, [r4, #16]
 80039b0:	4665      	mov	r5, ip
 80039b2:	e7b9      	b.n	8003928 <_printf_i+0x118>
 80039b4:	6813      	ldr	r3, [r2, #0]
 80039b6:	1d19      	adds	r1, r3, #4
 80039b8:	6011      	str	r1, [r2, #0]
 80039ba:	681d      	ldr	r5, [r3, #0]
 80039bc:	6862      	ldr	r2, [r4, #4]
 80039be:	2100      	movs	r1, #0
 80039c0:	4628      	mov	r0, r5
 80039c2:	f7fc fc15 	bl	80001f0 <memchr>
 80039c6:	b108      	cbz	r0, 80039cc <_printf_i+0x1bc>
 80039c8:	1b40      	subs	r0, r0, r5
 80039ca:	6060      	str	r0, [r4, #4]
 80039cc:	6863      	ldr	r3, [r4, #4]
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	2300      	movs	r3, #0
 80039d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d6:	e7a7      	b.n	8003928 <_printf_i+0x118>
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	462a      	mov	r2, r5
 80039dc:	4639      	mov	r1, r7
 80039de:	4630      	mov	r0, r6
 80039e0:	47c0      	blx	r8
 80039e2:	3001      	adds	r0, #1
 80039e4:	d0aa      	beq.n	800393c <_printf_i+0x12c>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	079b      	lsls	r3, r3, #30
 80039ea:	d413      	bmi.n	8003a14 <_printf_i+0x204>
 80039ec:	68e0      	ldr	r0, [r4, #12]
 80039ee:	9b03      	ldr	r3, [sp, #12]
 80039f0:	4298      	cmp	r0, r3
 80039f2:	bfb8      	it	lt
 80039f4:	4618      	movlt	r0, r3
 80039f6:	e7a3      	b.n	8003940 <_printf_i+0x130>
 80039f8:	2301      	movs	r3, #1
 80039fa:	464a      	mov	r2, r9
 80039fc:	4639      	mov	r1, r7
 80039fe:	4630      	mov	r0, r6
 8003a00:	47c0      	blx	r8
 8003a02:	3001      	adds	r0, #1
 8003a04:	d09a      	beq.n	800393c <_printf_i+0x12c>
 8003a06:	3501      	adds	r5, #1
 8003a08:	68e3      	ldr	r3, [r4, #12]
 8003a0a:	9a03      	ldr	r2, [sp, #12]
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	42ab      	cmp	r3, r5
 8003a10:	dcf2      	bgt.n	80039f8 <_printf_i+0x1e8>
 8003a12:	e7eb      	b.n	80039ec <_printf_i+0x1dc>
 8003a14:	2500      	movs	r5, #0
 8003a16:	f104 0919 	add.w	r9, r4, #25
 8003a1a:	e7f5      	b.n	8003a08 <_printf_i+0x1f8>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ac      	bne.n	800397a <_printf_i+0x16a>
 8003a20:	7803      	ldrb	r3, [r0, #0]
 8003a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a2a:	e76c      	b.n	8003906 <_printf_i+0xf6>
 8003a2c:	08004111 	.word	0x08004111
 8003a30:	08004122 	.word	0x08004122

08003a34 <_sbrk_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4c06      	ldr	r4, [pc, #24]	; (8003a50 <_sbrk_r+0x1c>)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	f7fd fba8 	bl	8001194 <_sbrk>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d102      	bne.n	8003a4e <_sbrk_r+0x1a>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	b103      	cbz	r3, 8003a4e <_sbrk_r+0x1a>
 8003a4c:	602b      	str	r3, [r5, #0]
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	20000128 	.word	0x20000128

08003a54 <__sread>:
 8003a54:	b510      	push	{r4, lr}
 8003a56:	460c      	mov	r4, r1
 8003a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5c:	f000 fa96 	bl	8003f8c <_read_r>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	bfab      	itete	ge
 8003a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a66:	89a3      	ldrhlt	r3, [r4, #12]
 8003a68:	181b      	addge	r3, r3, r0
 8003a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a6e:	bfac      	ite	ge
 8003a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a72:	81a3      	strhlt	r3, [r4, #12]
 8003a74:	bd10      	pop	{r4, pc}

08003a76 <__swrite>:
 8003a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7a:	461f      	mov	r7, r3
 8003a7c:	898b      	ldrh	r3, [r1, #12]
 8003a7e:	05db      	lsls	r3, r3, #23
 8003a80:	4605      	mov	r5, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	4616      	mov	r6, r2
 8003a86:	d505      	bpl.n	8003a94 <__swrite+0x1e>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a90:	f000 f9b6 	bl	8003e00 <_lseek_r>
 8003a94:	89a3      	ldrh	r3, [r4, #12]
 8003a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a9e:	81a3      	strh	r3, [r4, #12]
 8003aa0:	4632      	mov	r2, r6
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aaa:	f000 b869 	b.w	8003b80 <_write_r>

08003aae <__sseek>:
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab6:	f000 f9a3 	bl	8003e00 <_lseek_r>
 8003aba:	1c43      	adds	r3, r0, #1
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	bf15      	itete	ne
 8003ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003aca:	81a3      	strheq	r3, [r4, #12]
 8003acc:	bf18      	it	ne
 8003ace:	81a3      	strhne	r3, [r4, #12]
 8003ad0:	bd10      	pop	{r4, pc}

08003ad2 <__sclose>:
 8003ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad6:	f000 b8d3 	b.w	8003c80 <_close_r>
	...

08003adc <__swbuf_r>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	460e      	mov	r6, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	b118      	cbz	r0, 8003aee <__swbuf_r+0x12>
 8003ae6:	6983      	ldr	r3, [r0, #24]
 8003ae8:	b90b      	cbnz	r3, 8003aee <__swbuf_r+0x12>
 8003aea:	f7ff fbf7 	bl	80032dc <__sinit>
 8003aee:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <__swbuf_r+0x98>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	d12a      	bne.n	8003b4a <__swbuf_r+0x6e>
 8003af4:	686c      	ldr	r4, [r5, #4]
 8003af6:	69a3      	ldr	r3, [r4, #24]
 8003af8:	60a3      	str	r3, [r4, #8]
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	071a      	lsls	r2, r3, #28
 8003afe:	d52e      	bpl.n	8003b5e <__swbuf_r+0x82>
 8003b00:	6923      	ldr	r3, [r4, #16]
 8003b02:	b363      	cbz	r3, 8003b5e <__swbuf_r+0x82>
 8003b04:	6923      	ldr	r3, [r4, #16]
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	1ac0      	subs	r0, r0, r3
 8003b0a:	6963      	ldr	r3, [r4, #20]
 8003b0c:	b2f6      	uxtb	r6, r6
 8003b0e:	4283      	cmp	r3, r0
 8003b10:	4637      	mov	r7, r6
 8003b12:	dc04      	bgt.n	8003b1e <__swbuf_r+0x42>
 8003b14:	4621      	mov	r1, r4
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 f948 	bl	8003dac <_fflush_r>
 8003b1c:	bb28      	cbnz	r0, 8003b6a <__swbuf_r+0x8e>
 8003b1e:	68a3      	ldr	r3, [r4, #8]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	60a3      	str	r3, [r4, #8]
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	6022      	str	r2, [r4, #0]
 8003b2a:	701e      	strb	r6, [r3, #0]
 8003b2c:	6963      	ldr	r3, [r4, #20]
 8003b2e:	3001      	adds	r0, #1
 8003b30:	4283      	cmp	r3, r0
 8003b32:	d004      	beq.n	8003b3e <__swbuf_r+0x62>
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	07db      	lsls	r3, r3, #31
 8003b38:	d519      	bpl.n	8003b6e <__swbuf_r+0x92>
 8003b3a:	2e0a      	cmp	r6, #10
 8003b3c:	d117      	bne.n	8003b6e <__swbuf_r+0x92>
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4628      	mov	r0, r5
 8003b42:	f000 f933 	bl	8003dac <_fflush_r>
 8003b46:	b190      	cbz	r0, 8003b6e <__swbuf_r+0x92>
 8003b48:	e00f      	b.n	8003b6a <__swbuf_r+0x8e>
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <__swbuf_r+0x9c>)
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	d101      	bne.n	8003b54 <__swbuf_r+0x78>
 8003b50:	68ac      	ldr	r4, [r5, #8]
 8003b52:	e7d0      	b.n	8003af6 <__swbuf_r+0x1a>
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <__swbuf_r+0xa0>)
 8003b56:	429c      	cmp	r4, r3
 8003b58:	bf08      	it	eq
 8003b5a:	68ec      	ldreq	r4, [r5, #12]
 8003b5c:	e7cb      	b.n	8003af6 <__swbuf_r+0x1a>
 8003b5e:	4621      	mov	r1, r4
 8003b60:	4628      	mov	r0, r5
 8003b62:	f000 f81f 	bl	8003ba4 <__swsetup_r>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d0cc      	beq.n	8003b04 <__swbuf_r+0x28>
 8003b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8003b6e:	4638      	mov	r0, r7
 8003b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	080040c0 	.word	0x080040c0
 8003b78:	080040e0 	.word	0x080040e0
 8003b7c:	080040a0 	.word	0x080040a0

08003b80 <_write_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	4c07      	ldr	r4, [pc, #28]	; (8003ba0 <_write_r+0x20>)
 8003b84:	4605      	mov	r5, r0
 8003b86:	4608      	mov	r0, r1
 8003b88:	4611      	mov	r1, r2
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	6022      	str	r2, [r4, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f7fd faaf 	bl	80010f2 <_write>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_write_r+0x1e>
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_write_r+0x1e>
 8003b9c:	602b      	str	r3, [r5, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	20000128 	.word	0x20000128

08003ba4 <__swsetup_r>:
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <__swsetup_r+0xcc>)
 8003ba6:	b570      	push	{r4, r5, r6, lr}
 8003ba8:	681d      	ldr	r5, [r3, #0]
 8003baa:	4606      	mov	r6, r0
 8003bac:	460c      	mov	r4, r1
 8003bae:	b125      	cbz	r5, 8003bba <__swsetup_r+0x16>
 8003bb0:	69ab      	ldr	r3, [r5, #24]
 8003bb2:	b913      	cbnz	r3, 8003bba <__swsetup_r+0x16>
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f7ff fb91 	bl	80032dc <__sinit>
 8003bba:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <__swsetup_r+0xd0>)
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	d10f      	bne.n	8003be0 <__swsetup_r+0x3c>
 8003bc0:	686c      	ldr	r4, [r5, #4]
 8003bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	0715      	lsls	r5, r2, #28
 8003bca:	d42c      	bmi.n	8003c26 <__swsetup_r+0x82>
 8003bcc:	06d0      	lsls	r0, r2, #27
 8003bce:	d411      	bmi.n	8003bf4 <__swsetup_r+0x50>
 8003bd0:	2209      	movs	r2, #9
 8003bd2:	6032      	str	r2, [r6, #0]
 8003bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	e03e      	b.n	8003c5e <__swsetup_r+0xba>
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <__swsetup_r+0xd4>)
 8003be2:	429c      	cmp	r4, r3
 8003be4:	d101      	bne.n	8003bea <__swsetup_r+0x46>
 8003be6:	68ac      	ldr	r4, [r5, #8]
 8003be8:	e7eb      	b.n	8003bc2 <__swsetup_r+0x1e>
 8003bea:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <__swsetup_r+0xd8>)
 8003bec:	429c      	cmp	r4, r3
 8003bee:	bf08      	it	eq
 8003bf0:	68ec      	ldreq	r4, [r5, #12]
 8003bf2:	e7e6      	b.n	8003bc2 <__swsetup_r+0x1e>
 8003bf4:	0751      	lsls	r1, r2, #29
 8003bf6:	d512      	bpl.n	8003c1e <__swsetup_r+0x7a>
 8003bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bfa:	b141      	cbz	r1, 8003c0e <__swsetup_r+0x6a>
 8003bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c00:	4299      	cmp	r1, r3
 8003c02:	d002      	beq.n	8003c0a <__swsetup_r+0x66>
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f973 	bl	8003ef0 <_free_r>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c14:	81a3      	strh	r3, [r4, #12]
 8003c16:	2300      	movs	r3, #0
 8003c18:	6063      	str	r3, [r4, #4]
 8003c1a:	6923      	ldr	r3, [r4, #16]
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	f043 0308 	orr.w	r3, r3, #8
 8003c24:	81a3      	strh	r3, [r4, #12]
 8003c26:	6923      	ldr	r3, [r4, #16]
 8003c28:	b94b      	cbnz	r3, 8003c3e <__swsetup_r+0x9a>
 8003c2a:	89a3      	ldrh	r3, [r4, #12]
 8003c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c34:	d003      	beq.n	8003c3e <__swsetup_r+0x9a>
 8003c36:	4621      	mov	r1, r4
 8003c38:	4630      	mov	r0, r6
 8003c3a:	f000 f917 	bl	8003e6c <__smakebuf_r>
 8003c3e:	89a2      	ldrh	r2, [r4, #12]
 8003c40:	f012 0301 	ands.w	r3, r2, #1
 8003c44:	d00c      	beq.n	8003c60 <__swsetup_r+0xbc>
 8003c46:	2300      	movs	r3, #0
 8003c48:	60a3      	str	r3, [r4, #8]
 8003c4a:	6963      	ldr	r3, [r4, #20]
 8003c4c:	425b      	negs	r3, r3
 8003c4e:	61a3      	str	r3, [r4, #24]
 8003c50:	6923      	ldr	r3, [r4, #16]
 8003c52:	b953      	cbnz	r3, 8003c6a <__swsetup_r+0xc6>
 8003c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c5c:	d1ba      	bne.n	8003bd4 <__swsetup_r+0x30>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	0792      	lsls	r2, r2, #30
 8003c62:	bf58      	it	pl
 8003c64:	6963      	ldrpl	r3, [r4, #20]
 8003c66:	60a3      	str	r3, [r4, #8]
 8003c68:	e7f2      	b.n	8003c50 <__swsetup_r+0xac>
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	e7f7      	b.n	8003c5e <__swsetup_r+0xba>
 8003c6e:	bf00      	nop
 8003c70:	20000010 	.word	0x20000010
 8003c74:	080040c0 	.word	0x080040c0
 8003c78:	080040e0 	.word	0x080040e0
 8003c7c:	080040a0 	.word	0x080040a0

08003c80 <_close_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4c06      	ldr	r4, [pc, #24]	; (8003c9c <_close_r+0x1c>)
 8003c84:	2300      	movs	r3, #0
 8003c86:	4605      	mov	r5, r0
 8003c88:	4608      	mov	r0, r1
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	f7fd fa4d 	bl	800112a <_close>
 8003c90:	1c43      	adds	r3, r0, #1
 8003c92:	d102      	bne.n	8003c9a <_close_r+0x1a>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	b103      	cbz	r3, 8003c9a <_close_r+0x1a>
 8003c98:	602b      	str	r3, [r5, #0]
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	20000128 	.word	0x20000128

08003ca0 <__sflush_r>:
 8003ca0:	898a      	ldrh	r2, [r1, #12]
 8003ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	0710      	lsls	r0, r2, #28
 8003caa:	460c      	mov	r4, r1
 8003cac:	d458      	bmi.n	8003d60 <__sflush_r+0xc0>
 8003cae:	684b      	ldr	r3, [r1, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	dc05      	bgt.n	8003cc0 <__sflush_r+0x20>
 8003cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	dc02      	bgt.n	8003cc0 <__sflush_r+0x20>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cc2:	2e00      	cmp	r6, #0
 8003cc4:	d0f9      	beq.n	8003cba <__sflush_r+0x1a>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ccc:	682f      	ldr	r7, [r5, #0]
 8003cce:	6a21      	ldr	r1, [r4, #32]
 8003cd0:	602b      	str	r3, [r5, #0]
 8003cd2:	d032      	beq.n	8003d3a <__sflush_r+0x9a>
 8003cd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	075a      	lsls	r2, r3, #29
 8003cda:	d505      	bpl.n	8003ce8 <__sflush_r+0x48>
 8003cdc:	6863      	ldr	r3, [r4, #4]
 8003cde:	1ac0      	subs	r0, r0, r3
 8003ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ce2:	b10b      	cbz	r3, 8003ce8 <__sflush_r+0x48>
 8003ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ce6:	1ac0      	subs	r0, r0, r3
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4602      	mov	r2, r0
 8003cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cee:	6a21      	ldr	r1, [r4, #32]
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	47b0      	blx	r6
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	d106      	bne.n	8003d08 <__sflush_r+0x68>
 8003cfa:	6829      	ldr	r1, [r5, #0]
 8003cfc:	291d      	cmp	r1, #29
 8003cfe:	d848      	bhi.n	8003d92 <__sflush_r+0xf2>
 8003d00:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <__sflush_r+0x108>)
 8003d02:	40ca      	lsrs	r2, r1
 8003d04:	07d6      	lsls	r6, r2, #31
 8003d06:	d544      	bpl.n	8003d92 <__sflush_r+0xf2>
 8003d08:	2200      	movs	r2, #0
 8003d0a:	6062      	str	r2, [r4, #4]
 8003d0c:	04d9      	lsls	r1, r3, #19
 8003d0e:	6922      	ldr	r2, [r4, #16]
 8003d10:	6022      	str	r2, [r4, #0]
 8003d12:	d504      	bpl.n	8003d1e <__sflush_r+0x7e>
 8003d14:	1c42      	adds	r2, r0, #1
 8003d16:	d101      	bne.n	8003d1c <__sflush_r+0x7c>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	b903      	cbnz	r3, 8003d1e <__sflush_r+0x7e>
 8003d1c:	6560      	str	r0, [r4, #84]	; 0x54
 8003d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d20:	602f      	str	r7, [r5, #0]
 8003d22:	2900      	cmp	r1, #0
 8003d24:	d0c9      	beq.n	8003cba <__sflush_r+0x1a>
 8003d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d2a:	4299      	cmp	r1, r3
 8003d2c:	d002      	beq.n	8003d34 <__sflush_r+0x94>
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 f8de 	bl	8003ef0 <_free_r>
 8003d34:	2000      	movs	r0, #0
 8003d36:	6360      	str	r0, [r4, #52]	; 0x34
 8003d38:	e7c0      	b.n	8003cbc <__sflush_r+0x1c>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	47b0      	blx	r6
 8003d40:	1c41      	adds	r1, r0, #1
 8003d42:	d1c8      	bne.n	8003cd6 <__sflush_r+0x36>
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0c5      	beq.n	8003cd6 <__sflush_r+0x36>
 8003d4a:	2b1d      	cmp	r3, #29
 8003d4c:	d001      	beq.n	8003d52 <__sflush_r+0xb2>
 8003d4e:	2b16      	cmp	r3, #22
 8003d50:	d101      	bne.n	8003d56 <__sflush_r+0xb6>
 8003d52:	602f      	str	r7, [r5, #0]
 8003d54:	e7b1      	b.n	8003cba <__sflush_r+0x1a>
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	e7ad      	b.n	8003cbc <__sflush_r+0x1c>
 8003d60:	690f      	ldr	r7, [r1, #16]
 8003d62:	2f00      	cmp	r7, #0
 8003d64:	d0a9      	beq.n	8003cba <__sflush_r+0x1a>
 8003d66:	0793      	lsls	r3, r2, #30
 8003d68:	680e      	ldr	r6, [r1, #0]
 8003d6a:	bf08      	it	eq
 8003d6c:	694b      	ldreq	r3, [r1, #20]
 8003d6e:	600f      	str	r7, [r1, #0]
 8003d70:	bf18      	it	ne
 8003d72:	2300      	movne	r3, #0
 8003d74:	eba6 0807 	sub.w	r8, r6, r7
 8003d78:	608b      	str	r3, [r1, #8]
 8003d7a:	f1b8 0f00 	cmp.w	r8, #0
 8003d7e:	dd9c      	ble.n	8003cba <__sflush_r+0x1a>
 8003d80:	4643      	mov	r3, r8
 8003d82:	463a      	mov	r2, r7
 8003d84:	6a21      	ldr	r1, [r4, #32]
 8003d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d88:	4628      	mov	r0, r5
 8003d8a:	47b0      	blx	r6
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	dc06      	bgt.n	8003d9e <__sflush_r+0xfe>
 8003d90:	89a3      	ldrh	r3, [r4, #12]
 8003d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d96:	81a3      	strh	r3, [r4, #12]
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	e78e      	b.n	8003cbc <__sflush_r+0x1c>
 8003d9e:	4407      	add	r7, r0
 8003da0:	eba8 0800 	sub.w	r8, r8, r0
 8003da4:	e7e9      	b.n	8003d7a <__sflush_r+0xda>
 8003da6:	bf00      	nop
 8003da8:	20400001 	.word	0x20400001

08003dac <_fflush_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	690b      	ldr	r3, [r1, #16]
 8003db0:	4605      	mov	r5, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	b1db      	cbz	r3, 8003dee <_fflush_r+0x42>
 8003db6:	b118      	cbz	r0, 8003dc0 <_fflush_r+0x14>
 8003db8:	6983      	ldr	r3, [r0, #24]
 8003dba:	b90b      	cbnz	r3, 8003dc0 <_fflush_r+0x14>
 8003dbc:	f7ff fa8e 	bl	80032dc <__sinit>
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <_fflush_r+0x48>)
 8003dc2:	429c      	cmp	r4, r3
 8003dc4:	d109      	bne.n	8003dda <_fflush_r+0x2e>
 8003dc6:	686c      	ldr	r4, [r5, #4]
 8003dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dcc:	b17b      	cbz	r3, 8003dee <_fflush_r+0x42>
 8003dce:	4621      	mov	r1, r4
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dd6:	f7ff bf63 	b.w	8003ca0 <__sflush_r>
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <_fflush_r+0x4c>)
 8003ddc:	429c      	cmp	r4, r3
 8003dde:	d101      	bne.n	8003de4 <_fflush_r+0x38>
 8003de0:	68ac      	ldr	r4, [r5, #8]
 8003de2:	e7f1      	b.n	8003dc8 <_fflush_r+0x1c>
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <_fflush_r+0x50>)
 8003de6:	429c      	cmp	r4, r3
 8003de8:	bf08      	it	eq
 8003dea:	68ec      	ldreq	r4, [r5, #12]
 8003dec:	e7ec      	b.n	8003dc8 <_fflush_r+0x1c>
 8003dee:	2000      	movs	r0, #0
 8003df0:	bd38      	pop	{r3, r4, r5, pc}
 8003df2:	bf00      	nop
 8003df4:	080040c0 	.word	0x080040c0
 8003df8:	080040e0 	.word	0x080040e0
 8003dfc:	080040a0 	.word	0x080040a0

08003e00 <_lseek_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4c07      	ldr	r4, [pc, #28]	; (8003e20 <_lseek_r+0x20>)
 8003e04:	4605      	mov	r5, r0
 8003e06:	4608      	mov	r0, r1
 8003e08:	4611      	mov	r1, r2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	6022      	str	r2, [r4, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f7fd f9b2 	bl	8001178 <_lseek>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_lseek_r+0x1e>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_lseek_r+0x1e>
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20000128 	.word	0x20000128

08003e24 <__swhatbuf_r>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	460e      	mov	r6, r1
 8003e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	b096      	sub	sp, #88	; 0x58
 8003e30:	4614      	mov	r4, r2
 8003e32:	461d      	mov	r5, r3
 8003e34:	da07      	bge.n	8003e46 <__swhatbuf_r+0x22>
 8003e36:	2300      	movs	r3, #0
 8003e38:	602b      	str	r3, [r5, #0]
 8003e3a:	89b3      	ldrh	r3, [r6, #12]
 8003e3c:	061a      	lsls	r2, r3, #24
 8003e3e:	d410      	bmi.n	8003e62 <__swhatbuf_r+0x3e>
 8003e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e44:	e00e      	b.n	8003e64 <__swhatbuf_r+0x40>
 8003e46:	466a      	mov	r2, sp
 8003e48:	f000 f8b2 	bl	8003fb0 <_fstat_r>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	dbf2      	blt.n	8003e36 <__swhatbuf_r+0x12>
 8003e50:	9a01      	ldr	r2, [sp, #4]
 8003e52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e5a:	425a      	negs	r2, r3
 8003e5c:	415a      	adcs	r2, r3
 8003e5e:	602a      	str	r2, [r5, #0]
 8003e60:	e7ee      	b.n	8003e40 <__swhatbuf_r+0x1c>
 8003e62:	2340      	movs	r3, #64	; 0x40
 8003e64:	2000      	movs	r0, #0
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	b016      	add	sp, #88	; 0x58
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}

08003e6c <__smakebuf_r>:
 8003e6c:	898b      	ldrh	r3, [r1, #12]
 8003e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e70:	079d      	lsls	r5, r3, #30
 8003e72:	4606      	mov	r6, r0
 8003e74:	460c      	mov	r4, r1
 8003e76:	d507      	bpl.n	8003e88 <__smakebuf_r+0x1c>
 8003e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	6123      	str	r3, [r4, #16]
 8003e80:	2301      	movs	r3, #1
 8003e82:	6163      	str	r3, [r4, #20]
 8003e84:	b002      	add	sp, #8
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	ab01      	add	r3, sp, #4
 8003e8a:	466a      	mov	r2, sp
 8003e8c:	f7ff ffca 	bl	8003e24 <__swhatbuf_r>
 8003e90:	9900      	ldr	r1, [sp, #0]
 8003e92:	4605      	mov	r5, r0
 8003e94:	4630      	mov	r0, r6
 8003e96:	f7ff faab 	bl	80033f0 <_malloc_r>
 8003e9a:	b948      	cbnz	r0, 8003eb0 <__smakebuf_r+0x44>
 8003e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea0:	059a      	lsls	r2, r3, #22
 8003ea2:	d4ef      	bmi.n	8003e84 <__smakebuf_r+0x18>
 8003ea4:	f023 0303 	bic.w	r3, r3, #3
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	e7e3      	b.n	8003e78 <__smakebuf_r+0xc>
 8003eb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <__smakebuf_r+0x7c>)
 8003eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	6020      	str	r0, [r4, #0]
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	9b00      	ldr	r3, [sp, #0]
 8003ec0:	6163      	str	r3, [r4, #20]
 8003ec2:	9b01      	ldr	r3, [sp, #4]
 8003ec4:	6120      	str	r0, [r4, #16]
 8003ec6:	b15b      	cbz	r3, 8003ee0 <__smakebuf_r+0x74>
 8003ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f000 f881 	bl	8003fd4 <_isatty_r>
 8003ed2:	b128      	cbz	r0, 8003ee0 <__smakebuf_r+0x74>
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	431d      	orrs	r5, r3
 8003ee4:	81a5      	strh	r5, [r4, #12]
 8003ee6:	e7cd      	b.n	8003e84 <__smakebuf_r+0x18>
 8003ee8:	080032a5 	.word	0x080032a5

08003eec <__malloc_lock>:
 8003eec:	4770      	bx	lr

08003eee <__malloc_unlock>:
 8003eee:	4770      	bx	lr

08003ef0 <_free_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4605      	mov	r5, r0
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	d045      	beq.n	8003f84 <_free_r+0x94>
 8003ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003efc:	1f0c      	subs	r4, r1, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bfb8      	it	lt
 8003f02:	18e4      	addlt	r4, r4, r3
 8003f04:	f7ff fff2 	bl	8003eec <__malloc_lock>
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <_free_r+0x98>)
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	b933      	cbnz	r3, 8003f1e <_free_r+0x2e>
 8003f10:	6063      	str	r3, [r4, #4]
 8003f12:	6014      	str	r4, [r2, #0]
 8003f14:	4628      	mov	r0, r5
 8003f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f1a:	f7ff bfe8 	b.w	8003eee <__malloc_unlock>
 8003f1e:	42a3      	cmp	r3, r4
 8003f20:	d90c      	bls.n	8003f3c <_free_r+0x4c>
 8003f22:	6821      	ldr	r1, [r4, #0]
 8003f24:	1862      	adds	r2, r4, r1
 8003f26:	4293      	cmp	r3, r2
 8003f28:	bf04      	itt	eq
 8003f2a:	681a      	ldreq	r2, [r3, #0]
 8003f2c:	685b      	ldreq	r3, [r3, #4]
 8003f2e:	6063      	str	r3, [r4, #4]
 8003f30:	bf04      	itt	eq
 8003f32:	1852      	addeq	r2, r2, r1
 8003f34:	6022      	streq	r2, [r4, #0]
 8003f36:	6004      	str	r4, [r0, #0]
 8003f38:	e7ec      	b.n	8003f14 <_free_r+0x24>
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	b10a      	cbz	r2, 8003f44 <_free_r+0x54>
 8003f40:	42a2      	cmp	r2, r4
 8003f42:	d9fa      	bls.n	8003f3a <_free_r+0x4a>
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	1858      	adds	r0, r3, r1
 8003f48:	42a0      	cmp	r0, r4
 8003f4a:	d10b      	bne.n	8003f64 <_free_r+0x74>
 8003f4c:	6820      	ldr	r0, [r4, #0]
 8003f4e:	4401      	add	r1, r0
 8003f50:	1858      	adds	r0, r3, r1
 8003f52:	4282      	cmp	r2, r0
 8003f54:	6019      	str	r1, [r3, #0]
 8003f56:	d1dd      	bne.n	8003f14 <_free_r+0x24>
 8003f58:	6810      	ldr	r0, [r2, #0]
 8003f5a:	6852      	ldr	r2, [r2, #4]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	4401      	add	r1, r0
 8003f60:	6019      	str	r1, [r3, #0]
 8003f62:	e7d7      	b.n	8003f14 <_free_r+0x24>
 8003f64:	d902      	bls.n	8003f6c <_free_r+0x7c>
 8003f66:	230c      	movs	r3, #12
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	e7d3      	b.n	8003f14 <_free_r+0x24>
 8003f6c:	6820      	ldr	r0, [r4, #0]
 8003f6e:	1821      	adds	r1, r4, r0
 8003f70:	428a      	cmp	r2, r1
 8003f72:	bf04      	itt	eq
 8003f74:	6811      	ldreq	r1, [r2, #0]
 8003f76:	6852      	ldreq	r2, [r2, #4]
 8003f78:	6062      	str	r2, [r4, #4]
 8003f7a:	bf04      	itt	eq
 8003f7c:	1809      	addeq	r1, r1, r0
 8003f7e:	6021      	streq	r1, [r4, #0]
 8003f80:	605c      	str	r4, [r3, #4]
 8003f82:	e7c7      	b.n	8003f14 <_free_r+0x24>
 8003f84:	bd38      	pop	{r3, r4, r5, pc}
 8003f86:	bf00      	nop
 8003f88:	2000009c 	.word	0x2000009c

08003f8c <_read_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4c07      	ldr	r4, [pc, #28]	; (8003fac <_read_r+0x20>)
 8003f90:	4605      	mov	r5, r0
 8003f92:	4608      	mov	r0, r1
 8003f94:	4611      	mov	r1, r2
 8003f96:	2200      	movs	r2, #0
 8003f98:	6022      	str	r2, [r4, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f7fd f88c 	bl	80010b8 <_read>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_read_r+0x1e>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_read_r+0x1e>
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	20000128 	.word	0x20000128

08003fb0 <_fstat_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	4c07      	ldr	r4, [pc, #28]	; (8003fd0 <_fstat_r+0x20>)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	f7fd f8c0 	bl	8001142 <_fstat>
 8003fc2:	1c43      	adds	r3, r0, #1
 8003fc4:	d102      	bne.n	8003fcc <_fstat_r+0x1c>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	b103      	cbz	r3, 8003fcc <_fstat_r+0x1c>
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	bd38      	pop	{r3, r4, r5, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000128 	.word	0x20000128

08003fd4 <_isatty_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4c06      	ldr	r4, [pc, #24]	; (8003ff0 <_isatty_r+0x1c>)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4605      	mov	r5, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	f7fd f8bf 	bl	8001162 <_isatty>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_isatty_r+0x1a>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_isatty_r+0x1a>
 8003fec:	602b      	str	r3, [r5, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	20000128 	.word	0x20000128

08003ff4 <_init>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr

08004000 <_fini>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr
